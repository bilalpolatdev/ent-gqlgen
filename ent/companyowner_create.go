// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/companyposition"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyOwnerCreate is the builder for creating a CompanyOwner entity.
type CompanyOwnerCreate struct {
	config
	mutation *CompanyOwnerMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (coc *CompanyOwnerCreate) SetName(s string) *CompanyOwnerCreate {
	coc.mutation.SetName(s)
	return coc
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableName(s *string) *CompanyOwnerCreate {
	if s != nil {
		coc.SetName(*s)
	}
	return coc
}

// SetRegisterNo sets the "RegisterNo" field.
func (coc *CompanyOwnerCreate) SetRegisterNo(i int) *CompanyOwnerCreate {
	coc.mutation.SetRegisterNo(i)
	return coc
}

// SetNillableRegisterNo sets the "RegisterNo" field if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableRegisterNo(i *int) *CompanyOwnerCreate {
	if i != nil {
		coc.SetRegisterNo(*i)
	}
	return coc
}

// SetCertNo sets the "CertNo" field.
func (coc *CompanyOwnerCreate) SetCertNo(i int) *CompanyOwnerCreate {
	coc.mutation.SetCertNo(i)
	return coc
}

// SetNillableCertNo sets the "CertNo" field if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableCertNo(i *int) *CompanyOwnerCreate {
	if i != nil {
		coc.SetCertNo(*i)
	}
	return coc
}

// SetDeleted sets the "Deleted" field.
func (coc *CompanyOwnerCreate) SetDeleted(i int) *CompanyOwnerCreate {
	coc.mutation.SetDeleted(i)
	return coc
}

// SetNillableDeleted sets the "Deleted" field if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableDeleted(i *int) *CompanyOwnerCreate {
	if i != nil {
		coc.SetDeleted(*i)
	}
	return coc
}

// SetCreatedAt sets the "CreatedAt" field.
func (coc *CompanyOwnerCreate) SetCreatedAt(t time.Time) *CompanyOwnerCreate {
	coc.mutation.SetCreatedAt(t)
	return coc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableCreatedAt(t *time.Time) *CompanyOwnerCreate {
	if t != nil {
		coc.SetCreatedAt(*t)
	}
	return coc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (coc *CompanyOwnerCreate) SetUpdatedAt(t time.Time) *CompanyOwnerCreate {
	coc.mutation.SetUpdatedAt(t)
	return coc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableUpdatedAt(t *time.Time) *CompanyOwnerCreate {
	if t != nil {
		coc.SetUpdatedAt(*t)
	}
	return coc
}

// AddCompanyOwnerIDs adds the "companyOwners" edge to the CompanyDetail entity by IDs.
func (coc *CompanyOwnerCreate) AddCompanyOwnerIDs(ids ...int) *CompanyOwnerCreate {
	coc.mutation.AddCompanyOwnerIDs(ids...)
	return coc
}

// AddCompanyOwners adds the "companyOwners" edges to the CompanyDetail entity.
func (coc *CompanyOwnerCreate) AddCompanyOwners(c ...*CompanyDetail) *CompanyOwnerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return coc.AddCompanyOwnerIDs(ids...)
}

// SetCompanyOwnerCareerID sets the "companyOwnerCareer" edge to the CompanyCareer entity by ID.
func (coc *CompanyOwnerCreate) SetCompanyOwnerCareerID(id int) *CompanyOwnerCreate {
	coc.mutation.SetCompanyOwnerCareerID(id)
	return coc
}

// SetNillableCompanyOwnerCareerID sets the "companyOwnerCareer" edge to the CompanyCareer entity by ID if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableCompanyOwnerCareerID(id *int) *CompanyOwnerCreate {
	if id != nil {
		coc = coc.SetCompanyOwnerCareerID(*id)
	}
	return coc
}

// SetCompanyOwnerCareer sets the "companyOwnerCareer" edge to the CompanyCareer entity.
func (coc *CompanyOwnerCreate) SetCompanyOwnerCareer(c *CompanyCareer) *CompanyOwnerCreate {
	return coc.SetCompanyOwnerCareerID(c.ID)
}

// SetCompanyOwnerPositionID sets the "companyOwnerPosition" edge to the CompanyPosition entity by ID.
func (coc *CompanyOwnerCreate) SetCompanyOwnerPositionID(id int) *CompanyOwnerCreate {
	coc.mutation.SetCompanyOwnerPositionID(id)
	return coc
}

// SetNillableCompanyOwnerPositionID sets the "companyOwnerPosition" edge to the CompanyPosition entity by ID if the given value is not nil.
func (coc *CompanyOwnerCreate) SetNillableCompanyOwnerPositionID(id *int) *CompanyOwnerCreate {
	if id != nil {
		coc = coc.SetCompanyOwnerPositionID(*id)
	}
	return coc
}

// SetCompanyOwnerPosition sets the "companyOwnerPosition" edge to the CompanyPosition entity.
func (coc *CompanyOwnerCreate) SetCompanyOwnerPosition(c *CompanyPosition) *CompanyOwnerCreate {
	return coc.SetCompanyOwnerPositionID(c.ID)
}

// Mutation returns the CompanyOwnerMutation object of the builder.
func (coc *CompanyOwnerCreate) Mutation() *CompanyOwnerMutation {
	return coc.mutation
}

// Save creates the CompanyOwner in the database.
func (coc *CompanyOwnerCreate) Save(ctx context.Context) (*CompanyOwner, error) {
	coc.defaults()
	return withHooks(ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *CompanyOwnerCreate) SaveX(ctx context.Context) *CompanyOwner {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *CompanyOwnerCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *CompanyOwnerCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *CompanyOwnerCreate) defaults() {
	if _, ok := coc.mutation.Name(); !ok {
		v := companyowner.DefaultName
		coc.mutation.SetName(v)
	}
	if _, ok := coc.mutation.Deleted(); !ok {
		v := companyowner.DefaultDeleted
		coc.mutation.SetDeleted(v)
	}
	if _, ok := coc.mutation.CreatedAt(); !ok {
		v := companyowner.DefaultCreatedAt()
		coc.mutation.SetCreatedAt(v)
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		v := companyowner.DefaultUpdatedAt()
		coc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *CompanyOwnerCreate) check() error {
	if _, ok := coc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "CompanyOwner.Name"`)}
	}
	if _, ok := coc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "Deleted", err: errors.New(`ent: missing required field "CompanyOwner.Deleted"`)}
	}
	if _, ok := coc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "CompanyOwner.CreatedAt"`)}
	}
	if _, ok := coc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "CompanyOwner.UpdatedAt"`)}
	}
	return nil
}

func (coc *CompanyOwnerCreate) sqlSave(ctx context.Context) (*CompanyOwner, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *CompanyOwnerCreate) createSpec() (*CompanyOwner, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyOwner{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(companyowner.Table, sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt))
	)
	if value, ok := coc.mutation.Name(); ok {
		_spec.SetField(companyowner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := coc.mutation.RegisterNo(); ok {
		_spec.SetField(companyowner.FieldRegisterNo, field.TypeInt, value)
		_node.RegisterNo = value
	}
	if value, ok := coc.mutation.CertNo(); ok {
		_spec.SetField(companyowner.FieldCertNo, field.TypeInt, value)
		_node.CertNo = value
	}
	if value, ok := coc.mutation.Deleted(); ok {
		_spec.SetField(companyowner.FieldDeleted, field.TypeInt, value)
		_node.Deleted = value
	}
	if value, ok := coc.mutation.CreatedAt(); ok {
		_spec.SetField(companyowner.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := coc.mutation.UpdatedAt(); ok {
		_spec.SetField(companyowner.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := coc.mutation.CompanyOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.CompanyOwnerCareerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerCareerTable,
			Columns: []string{companyowner.CompanyOwnerCareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.career_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := coc.mutation.CompanyOwnerPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerPositionTable,
			Columns: []string{companyowner.CompanyOwnerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.position_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyOwnerCreateBulk is the builder for creating many CompanyOwner entities in bulk.
type CompanyOwnerCreateBulk struct {
	config
	err      error
	builders []*CompanyOwnerCreate
}

// Save creates the CompanyOwner entities in the database.
func (cocb *CompanyOwnerCreateBulk) Save(ctx context.Context) ([]*CompanyOwner, error) {
	if cocb.err != nil {
		return nil, cocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*CompanyOwner, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyOwnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *CompanyOwnerCreateBulk) SaveX(ctx context.Context) []*CompanyOwner {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *CompanyOwnerCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *CompanyOwnerCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}
