// Code generated by ent, DO NOT EDIT.

package companycareer

import (
	"gqlgen-ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldLTE(FieldID, id))
}

// Career applies equality check predicate on the "Career" field. It's identical to CareerEQ.
func Career(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldEQ(FieldCareer, v))
}

// CareerEQ applies the EQ predicate on the "Career" field.
func CareerEQ(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldEQ(FieldCareer, v))
}

// CareerNEQ applies the NEQ predicate on the "Career" field.
func CareerNEQ(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldNEQ(FieldCareer, v))
}

// CareerIn applies the In predicate on the "Career" field.
func CareerIn(vs ...string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldIn(FieldCareer, vs...))
}

// CareerNotIn applies the NotIn predicate on the "Career" field.
func CareerNotIn(vs ...string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldNotIn(FieldCareer, vs...))
}

// CareerGT applies the GT predicate on the "Career" field.
func CareerGT(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldGT(FieldCareer, v))
}

// CareerGTE applies the GTE predicate on the "Career" field.
func CareerGTE(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldGTE(FieldCareer, v))
}

// CareerLT applies the LT predicate on the "Career" field.
func CareerLT(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldLT(FieldCareer, v))
}

// CareerLTE applies the LTE predicate on the "Career" field.
func CareerLTE(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldLTE(FieldCareer, v))
}

// CareerContains applies the Contains predicate on the "Career" field.
func CareerContains(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldContains(FieldCareer, v))
}

// CareerHasPrefix applies the HasPrefix predicate on the "Career" field.
func CareerHasPrefix(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldHasPrefix(FieldCareer, v))
}

// CareerHasSuffix applies the HasSuffix predicate on the "Career" field.
func CareerHasSuffix(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldHasSuffix(FieldCareer, v))
}

// CareerIsNil applies the IsNil predicate on the "Career" field.
func CareerIsNil() predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldIsNull(FieldCareer))
}

// CareerNotNil applies the NotNil predicate on the "Career" field.
func CareerNotNil() predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldNotNull(FieldCareer))
}

// CareerEqualFold applies the EqualFold predicate on the "Career" field.
func CareerEqualFold(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldEqualFold(FieldCareer, v))
}

// CareerContainsFold applies the ContainsFold predicate on the "Career" field.
func CareerContainsFold(v string) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.FieldContainsFold(FieldCareer, v))
}

// HasEngineerCareers applies the HasEdge predicate on the "engineerCareers" edge.
func HasEngineerCareers() predicate.CompanyCareer {
	return predicate.CompanyCareer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EngineerCareersTable, EngineerCareersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEngineerCareersWith applies the HasEdge predicate on the "engineerCareers" edge with a given conditions (other predicates).
func HasEngineerCareersWith(preds ...predicate.CompanyEngineer) predicate.CompanyCareer {
	return predicate.CompanyCareer(func(s *sql.Selector) {
		step := newEngineerCareersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompanyCareer) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompanyCareer) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompanyCareer) predicate.CompanyCareer {
	return predicate.CompanyCareer(sql.NotPredicates(p))
}
