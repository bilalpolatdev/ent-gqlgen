// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyposition"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyPositionCreate is the builder for creating a CompanyPosition entity.
type CompanyPositionCreate struct {
	config
	mutation *CompanyPositionMutation
	hooks    []Hook
}

// SetPosition sets the "Position" field.
func (cpc *CompanyPositionCreate) SetPosition(s string) *CompanyPositionCreate {
	cpc.mutation.SetPosition(s)
	return cpc
}

// SetNillablePosition sets the "Position" field if the given value is not nil.
func (cpc *CompanyPositionCreate) SetNillablePosition(s *string) *CompanyPositionCreate {
	if s != nil {
		cpc.SetPosition(*s)
	}
	return cpc
}

// AddEngineerPositionIDs adds the "engineerPositions" edge to the CompanyEngineer entity by IDs.
func (cpc *CompanyPositionCreate) AddEngineerPositionIDs(ids ...int) *CompanyPositionCreate {
	cpc.mutation.AddEngineerPositionIDs(ids...)
	return cpc
}

// AddEngineerPositions adds the "engineerPositions" edges to the CompanyEngineer entity.
func (cpc *CompanyPositionCreate) AddEngineerPositions(c ...*CompanyEngineer) *CompanyPositionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpc.AddEngineerPositionIDs(ids...)
}

// Mutation returns the CompanyPositionMutation object of the builder.
func (cpc *CompanyPositionCreate) Mutation() *CompanyPositionMutation {
	return cpc.mutation
}

// Save creates the CompanyPosition in the database.
func (cpc *CompanyPositionCreate) Save(ctx context.Context) (*CompanyPosition, error) {
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CompanyPositionCreate) SaveX(ctx context.Context) *CompanyPosition {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CompanyPositionCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CompanyPositionCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CompanyPositionCreate) check() error {
	return nil
}

func (cpc *CompanyPositionCreate) sqlSave(ctx context.Context) (*CompanyPosition, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *CompanyPositionCreate) createSpec() (*CompanyPosition, *sqlgraph.CreateSpec) {
	var (
		_node = &CompanyPosition{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(companyposition.Table, sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt))
	)
	if value, ok := cpc.mutation.Position(); ok {
		_spec.SetField(companyposition.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if nodes := cpc.mutation.EngineerPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompanyPositionCreateBulk is the builder for creating many CompanyPosition entities in bulk.
type CompanyPositionCreateBulk struct {
	config
	err      error
	builders []*CompanyPositionCreate
}

// Save creates the CompanyPosition entities in the database.
func (cpcb *CompanyPositionCreateBulk) Save(ctx context.Context) ([]*CompanyPosition, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CompanyPosition, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompanyPositionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CompanyPositionCreateBulk) SaveX(ctx context.Context) []*CompanyPosition {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CompanyPositionCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CompanyPositionCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
