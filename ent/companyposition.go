// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gqlgen-ent/ent/companyposition"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CompanyPosition is the model entity for the CompanyPosition schema.
type CompanyPosition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Position holds the value of the "Position" field.
	Position string `json:"Position,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyPositionQuery when eager-loading is set.
	Edges        CompanyPositionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompanyPositionEdges holds the relations/edges for other nodes in the graph.
type CompanyPositionEdges struct {
	// EngineerPositions holds the value of the engineerPositions edge.
	EngineerPositions []*CompanyEngineer `json:"engineerPositions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EngineerPositionsOrErr returns the EngineerPositions value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyPositionEdges) EngineerPositionsOrErr() ([]*CompanyEngineer, error) {
	if e.loadedTypes[0] {
		return e.EngineerPositions, nil
	}
	return nil, &NotLoadedError{edge: "engineerPositions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyPosition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companyposition.FieldID:
			values[i] = new(sql.NullInt64)
		case companyposition.FieldPosition:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyPosition fields.
func (cp *CompanyPosition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companyposition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case companyposition.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Position", values[i])
			} else if value.Valid {
				cp.Position = value.String
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanyPosition.
// This includes values selected through modifiers, order, etc.
func (cp *CompanyPosition) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryEngineerPositions queries the "engineerPositions" edge of the CompanyPosition entity.
func (cp *CompanyPosition) QueryEngineerPositions() *CompanyEngineerQuery {
	return NewCompanyPositionClient(cp.config).QueryEngineerPositions(cp)
}

// Update returns a builder for updating this CompanyPosition.
// Note that you need to call CompanyPosition.Unwrap() before calling this method if this CompanyPosition
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CompanyPosition) Update() *CompanyPositionUpdateOne {
	return NewCompanyPositionClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the CompanyPosition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CompanyPosition) Unwrap() *CompanyPosition {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanyPosition is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CompanyPosition) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyPosition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("Position=")
	builder.WriteString(cp.Position)
	builder.WriteByte(')')
	return builder.String()
}

// CompanyPositions is a parsable slice of CompanyPosition.
type CompanyPositions []*CompanyPosition
