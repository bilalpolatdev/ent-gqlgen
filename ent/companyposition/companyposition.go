// Code generated by ent, DO NOT EDIT.

package companyposition

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the companyposition type in the database.
	Label = "company_position"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// EdgeEngineerPositions holds the string denoting the engineerpositions edge name in mutations.
	EdgeEngineerPositions = "engineerPositions"
	// EdgeCompanyOwnerPositions holds the string denoting the companyownerpositions edge name in mutations.
	EdgeCompanyOwnerPositions = "companyOwnerPositions"
	// Table holds the table name of the companyposition in the database.
	Table = "company_positions"
	// EngineerPositionsTable is the table that holds the engineerPositions relation/edge.
	EngineerPositionsTable = "company_engineers"
	// EngineerPositionsInverseTable is the table name for the CompanyEngineer entity.
	// It exists in this package in order to avoid circular dependency with the "companyengineer" package.
	EngineerPositionsInverseTable = "company_engineers"
	// EngineerPositionsColumn is the table column denoting the engineerPositions relation/edge.
	EngineerPositionsColumn = "position_id"
	// CompanyOwnerPositionsTable is the table that holds the companyOwnerPositions relation/edge.
	CompanyOwnerPositionsTable = "company_owners"
	// CompanyOwnerPositionsInverseTable is the table name for the CompanyOwner entity.
	// It exists in this package in order to avoid circular dependency with the "companyowner" package.
	CompanyOwnerPositionsInverseTable = "company_owners"
	// CompanyOwnerPositionsColumn is the table column denoting the companyOwnerPositions relation/edge.
	CompanyOwnerPositionsColumn = "position_id"
)

// Columns holds all SQL columns for companyposition fields.
var Columns = []string{
	FieldID,
	FieldPosition,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CompanyPosition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPosition orders the results by the Position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByEngineerPositionsCount orders the results by engineerPositions count.
func ByEngineerPositionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEngineerPositionsStep(), opts...)
	}
}

// ByEngineerPositions orders the results by engineerPositions terms.
func ByEngineerPositions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEngineerPositionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompanyOwnerPositionsCount orders the results by companyOwnerPositions count.
func ByCompanyOwnerPositionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompanyOwnerPositionsStep(), opts...)
	}
}

// ByCompanyOwnerPositions orders the results by companyOwnerPositions terms.
func ByCompanyOwnerPositions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyOwnerPositionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEngineerPositionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EngineerPositionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EngineerPositionsTable, EngineerPositionsColumn),
	)
}
func newCompanyOwnerPositionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyOwnerPositionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompanyOwnerPositionsTable, CompanyOwnerPositionsColumn),
	)
}
