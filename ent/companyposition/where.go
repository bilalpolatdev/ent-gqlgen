// Code generated by ent, DO NOT EDIT.

package companyposition

import (
	"gqlgen-ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldLTE(FieldID, id))
}

// Position applies equality check predicate on the "Position" field. It's identical to PositionEQ.
func Position(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldEQ(FieldPosition, v))
}

// PositionEQ applies the EQ predicate on the "Position" field.
func PositionEQ(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "Position" field.
func PositionNEQ(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "Position" field.
func PositionIn(vs ...string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "Position" field.
func PositionNotIn(vs ...string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "Position" field.
func PositionGT(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "Position" field.
func PositionGTE(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "Position" field.
func PositionLT(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "Position" field.
func PositionLTE(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "Position" field.
func PositionContains(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "Position" field.
func PositionHasPrefix(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "Position" field.
func PositionHasSuffix(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionIsNil applies the IsNil predicate on the "Position" field.
func PositionIsNil() predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldIsNull(FieldPosition))
}

// PositionNotNil applies the NotNil predicate on the "Position" field.
func PositionNotNil() predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldNotNull(FieldPosition))
}

// PositionEqualFold applies the EqualFold predicate on the "Position" field.
func PositionEqualFold(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "Position" field.
func PositionContainsFold(v string) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.FieldContainsFold(FieldPosition, v))
}

// HasEngineerPositions applies the HasEdge predicate on the "engineerPositions" edge.
func HasEngineerPositions() predicate.CompanyPosition {
	return predicate.CompanyPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EngineerPositionsTable, EngineerPositionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEngineerPositionsWith applies the HasEdge predicate on the "engineerPositions" edge with a given conditions (other predicates).
func HasEngineerPositionsWith(preds ...predicate.CompanyEngineer) predicate.CompanyPosition {
	return predicate.CompanyPosition(func(s *sql.Selector) {
		step := newEngineerPositionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanyOwnerPositions applies the HasEdge predicate on the "companyOwnerPositions" edge.
func HasCompanyOwnerPositions() predicate.CompanyPosition {
	return predicate.CompanyPosition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CompanyOwnerPositionsTable, CompanyOwnerPositionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyOwnerPositionsWith applies the HasEdge predicate on the "companyOwnerPositions" edge with a given conditions (other predicates).
func HasCompanyOwnerPositionsWith(preds ...predicate.CompanyOwner) predicate.CompanyPosition {
	return predicate.CompanyPosition(func(s *sql.Selector) {
		step := newCompanyOwnerPositionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompanyPosition) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompanyPosition) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompanyPosition) predicate.CompanyPosition {
	return predicate.CompanyPosition(sql.NotPredicates(p))
}
