// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyCareerUpdate is the builder for updating CompanyCareer entities.
type CompanyCareerUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyCareerMutation
}

// Where appends a list predicates to the CompanyCareerUpdate builder.
func (ccu *CompanyCareerUpdate) Where(ps ...predicate.CompanyCareer) *CompanyCareerUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetCareer sets the "Career" field.
func (ccu *CompanyCareerUpdate) SetCareer(s string) *CompanyCareerUpdate {
	ccu.mutation.SetCareer(s)
	return ccu
}

// SetNillableCareer sets the "Career" field if the given value is not nil.
func (ccu *CompanyCareerUpdate) SetNillableCareer(s *string) *CompanyCareerUpdate {
	if s != nil {
		ccu.SetCareer(*s)
	}
	return ccu
}

// ClearCareer clears the value of the "Career" field.
func (ccu *CompanyCareerUpdate) ClearCareer() *CompanyCareerUpdate {
	ccu.mutation.ClearCareer()
	return ccu
}

// AddEngineerCareerIDs adds the "engineerCareers" edge to the CompanyEngineer entity by IDs.
func (ccu *CompanyCareerUpdate) AddEngineerCareerIDs(ids ...int) *CompanyCareerUpdate {
	ccu.mutation.AddEngineerCareerIDs(ids...)
	return ccu
}

// AddEngineerCareers adds the "engineerCareers" edges to the CompanyEngineer entity.
func (ccu *CompanyCareerUpdate) AddEngineerCareers(c ...*CompanyEngineer) *CompanyCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.AddEngineerCareerIDs(ids...)
}

// AddCompanyOwnerCareerIDs adds the "companyOwnerCareers" edge to the CompanyOwner entity by IDs.
func (ccu *CompanyCareerUpdate) AddCompanyOwnerCareerIDs(ids ...int) *CompanyCareerUpdate {
	ccu.mutation.AddCompanyOwnerCareerIDs(ids...)
	return ccu
}

// AddCompanyOwnerCareers adds the "companyOwnerCareers" edges to the CompanyOwner entity.
func (ccu *CompanyCareerUpdate) AddCompanyOwnerCareers(c ...*CompanyOwner) *CompanyCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.AddCompanyOwnerCareerIDs(ids...)
}

// Mutation returns the CompanyCareerMutation object of the builder.
func (ccu *CompanyCareerUpdate) Mutation() *CompanyCareerMutation {
	return ccu.mutation
}

// ClearEngineerCareers clears all "engineerCareers" edges to the CompanyEngineer entity.
func (ccu *CompanyCareerUpdate) ClearEngineerCareers() *CompanyCareerUpdate {
	ccu.mutation.ClearEngineerCareers()
	return ccu
}

// RemoveEngineerCareerIDs removes the "engineerCareers" edge to CompanyEngineer entities by IDs.
func (ccu *CompanyCareerUpdate) RemoveEngineerCareerIDs(ids ...int) *CompanyCareerUpdate {
	ccu.mutation.RemoveEngineerCareerIDs(ids...)
	return ccu
}

// RemoveEngineerCareers removes "engineerCareers" edges to CompanyEngineer entities.
func (ccu *CompanyCareerUpdate) RemoveEngineerCareers(c ...*CompanyEngineer) *CompanyCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.RemoveEngineerCareerIDs(ids...)
}

// ClearCompanyOwnerCareers clears all "companyOwnerCareers" edges to the CompanyOwner entity.
func (ccu *CompanyCareerUpdate) ClearCompanyOwnerCareers() *CompanyCareerUpdate {
	ccu.mutation.ClearCompanyOwnerCareers()
	return ccu
}

// RemoveCompanyOwnerCareerIDs removes the "companyOwnerCareers" edge to CompanyOwner entities by IDs.
func (ccu *CompanyCareerUpdate) RemoveCompanyOwnerCareerIDs(ids ...int) *CompanyCareerUpdate {
	ccu.mutation.RemoveCompanyOwnerCareerIDs(ids...)
	return ccu
}

// RemoveCompanyOwnerCareers removes "companyOwnerCareers" edges to CompanyOwner entities.
func (ccu *CompanyCareerUpdate) RemoveCompanyOwnerCareers(c ...*CompanyOwner) *CompanyCareerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccu.RemoveCompanyOwnerCareerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CompanyCareerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CompanyCareerUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CompanyCareerUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CompanyCareerUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccu *CompanyCareerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(companycareer.Table, companycareer.Columns, sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.Career(); ok {
		_spec.SetField(companycareer.FieldCareer, field.TypeString, value)
	}
	if ccu.mutation.CareerCleared() {
		_spec.ClearField(companycareer.FieldCareer, field.TypeString)
	}
	if ccu.mutation.EngineerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.EngineerCareersTable,
			Columns: []string{companycareer.EngineerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedEngineerCareersIDs(); len(nodes) > 0 && !ccu.mutation.EngineerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.EngineerCareersTable,
			Columns: []string{companycareer.EngineerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.EngineerCareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.EngineerCareersTable,
			Columns: []string{companycareer.EngineerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccu.mutation.CompanyOwnerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.CompanyOwnerCareersTable,
			Columns: []string{companycareer.CompanyOwnerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.RemovedCompanyOwnerCareersIDs(); len(nodes) > 0 && !ccu.mutation.CompanyOwnerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.CompanyOwnerCareersTable,
			Columns: []string{companycareer.CompanyOwnerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.CompanyOwnerCareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.CompanyOwnerCareersTable,
			Columns: []string{companycareer.CompanyOwnerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companycareer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CompanyCareerUpdateOne is the builder for updating a single CompanyCareer entity.
type CompanyCareerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyCareerMutation
}

// SetCareer sets the "Career" field.
func (ccuo *CompanyCareerUpdateOne) SetCareer(s string) *CompanyCareerUpdateOne {
	ccuo.mutation.SetCareer(s)
	return ccuo
}

// SetNillableCareer sets the "Career" field if the given value is not nil.
func (ccuo *CompanyCareerUpdateOne) SetNillableCareer(s *string) *CompanyCareerUpdateOne {
	if s != nil {
		ccuo.SetCareer(*s)
	}
	return ccuo
}

// ClearCareer clears the value of the "Career" field.
func (ccuo *CompanyCareerUpdateOne) ClearCareer() *CompanyCareerUpdateOne {
	ccuo.mutation.ClearCareer()
	return ccuo
}

// AddEngineerCareerIDs adds the "engineerCareers" edge to the CompanyEngineer entity by IDs.
func (ccuo *CompanyCareerUpdateOne) AddEngineerCareerIDs(ids ...int) *CompanyCareerUpdateOne {
	ccuo.mutation.AddEngineerCareerIDs(ids...)
	return ccuo
}

// AddEngineerCareers adds the "engineerCareers" edges to the CompanyEngineer entity.
func (ccuo *CompanyCareerUpdateOne) AddEngineerCareers(c ...*CompanyEngineer) *CompanyCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.AddEngineerCareerIDs(ids...)
}

// AddCompanyOwnerCareerIDs adds the "companyOwnerCareers" edge to the CompanyOwner entity by IDs.
func (ccuo *CompanyCareerUpdateOne) AddCompanyOwnerCareerIDs(ids ...int) *CompanyCareerUpdateOne {
	ccuo.mutation.AddCompanyOwnerCareerIDs(ids...)
	return ccuo
}

// AddCompanyOwnerCareers adds the "companyOwnerCareers" edges to the CompanyOwner entity.
func (ccuo *CompanyCareerUpdateOne) AddCompanyOwnerCareers(c ...*CompanyOwner) *CompanyCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.AddCompanyOwnerCareerIDs(ids...)
}

// Mutation returns the CompanyCareerMutation object of the builder.
func (ccuo *CompanyCareerUpdateOne) Mutation() *CompanyCareerMutation {
	return ccuo.mutation
}

// ClearEngineerCareers clears all "engineerCareers" edges to the CompanyEngineer entity.
func (ccuo *CompanyCareerUpdateOne) ClearEngineerCareers() *CompanyCareerUpdateOne {
	ccuo.mutation.ClearEngineerCareers()
	return ccuo
}

// RemoveEngineerCareerIDs removes the "engineerCareers" edge to CompanyEngineer entities by IDs.
func (ccuo *CompanyCareerUpdateOne) RemoveEngineerCareerIDs(ids ...int) *CompanyCareerUpdateOne {
	ccuo.mutation.RemoveEngineerCareerIDs(ids...)
	return ccuo
}

// RemoveEngineerCareers removes "engineerCareers" edges to CompanyEngineer entities.
func (ccuo *CompanyCareerUpdateOne) RemoveEngineerCareers(c ...*CompanyEngineer) *CompanyCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.RemoveEngineerCareerIDs(ids...)
}

// ClearCompanyOwnerCareers clears all "companyOwnerCareers" edges to the CompanyOwner entity.
func (ccuo *CompanyCareerUpdateOne) ClearCompanyOwnerCareers() *CompanyCareerUpdateOne {
	ccuo.mutation.ClearCompanyOwnerCareers()
	return ccuo
}

// RemoveCompanyOwnerCareerIDs removes the "companyOwnerCareers" edge to CompanyOwner entities by IDs.
func (ccuo *CompanyCareerUpdateOne) RemoveCompanyOwnerCareerIDs(ids ...int) *CompanyCareerUpdateOne {
	ccuo.mutation.RemoveCompanyOwnerCareerIDs(ids...)
	return ccuo
}

// RemoveCompanyOwnerCareers removes "companyOwnerCareers" edges to CompanyOwner entities.
func (ccuo *CompanyCareerUpdateOne) RemoveCompanyOwnerCareers(c ...*CompanyOwner) *CompanyCareerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ccuo.RemoveCompanyOwnerCareerIDs(ids...)
}

// Where appends a list predicates to the CompanyCareerUpdate builder.
func (ccuo *CompanyCareerUpdateOne) Where(ps ...predicate.CompanyCareer) *CompanyCareerUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CompanyCareerUpdateOne) Select(field string, fields ...string) *CompanyCareerUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CompanyCareer entity.
func (ccuo *CompanyCareerUpdateOne) Save(ctx context.Context) (*CompanyCareer, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CompanyCareerUpdateOne) SaveX(ctx context.Context) *CompanyCareer {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CompanyCareerUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CompanyCareerUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccuo *CompanyCareerUpdateOne) sqlSave(ctx context.Context) (_node *CompanyCareer, err error) {
	_spec := sqlgraph.NewUpdateSpec(companycareer.Table, companycareer.Columns, sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanyCareer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companycareer.FieldID)
		for _, f := range fields {
			if !companycareer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companycareer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.Career(); ok {
		_spec.SetField(companycareer.FieldCareer, field.TypeString, value)
	}
	if ccuo.mutation.CareerCleared() {
		_spec.ClearField(companycareer.FieldCareer, field.TypeString)
	}
	if ccuo.mutation.EngineerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.EngineerCareersTable,
			Columns: []string{companycareer.EngineerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedEngineerCareersIDs(); len(nodes) > 0 && !ccuo.mutation.EngineerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.EngineerCareersTable,
			Columns: []string{companycareer.EngineerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.EngineerCareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.EngineerCareersTable,
			Columns: []string{companycareer.EngineerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccuo.mutation.CompanyOwnerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.CompanyOwnerCareersTable,
			Columns: []string{companycareer.CompanyOwnerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.RemovedCompanyOwnerCareersIDs(); len(nodes) > 0 && !ccuo.mutation.CompanyOwnerCareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.CompanyOwnerCareersTable,
			Columns: []string{companycareer.CompanyOwnerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.CompanyOwnerCareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companycareer.CompanyOwnerCareersTable,
			Columns: []string{companycareer.CompanyOwnerCareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompanyCareer{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companycareer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
