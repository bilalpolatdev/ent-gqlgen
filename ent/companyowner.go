// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/companyposition"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CompanyOwner is the model entity for the CompanyOwner schema.
type CompanyOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// RegisterNo holds the value of the "RegisterNo" field.
	RegisterNo int `json:"RegisterNo,omitempty"`
	// CertNo holds the value of the "CertNo" field.
	CertNo int `json:"CertNo,omitempty"`
	// Deleted holds the value of the "Deleted" field.
	Deleted int `json:"Deleted,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyOwnerQuery when eager-loading is set.
	Edges        CompanyOwnerEdges `json:"edges"`
	career_id    *int
	position_id  *int
	selectValues sql.SelectValues
}

// CompanyOwnerEdges holds the relations/edges for other nodes in the graph.
type CompanyOwnerEdges struct {
	// CompanyOwners holds the value of the companyOwners edge.
	CompanyOwners []*CompanyDetail `json:"companyOwners,omitempty"`
	// CompanyOwnerCareer holds the value of the companyOwnerCareer edge.
	CompanyOwnerCareer *CompanyCareer `json:"companyOwnerCareer,omitempty"`
	// CompanyOwnerPosition holds the value of the companyOwnerPosition edge.
	CompanyOwnerPosition *CompanyPosition `json:"companyOwnerPosition,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedCompanyOwners map[string][]*CompanyDetail
}

// CompanyOwnersOrErr returns the CompanyOwners value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyOwnerEdges) CompanyOwnersOrErr() ([]*CompanyDetail, error) {
	if e.loadedTypes[0] {
		return e.CompanyOwners, nil
	}
	return nil, &NotLoadedError{edge: "companyOwners"}
}

// CompanyOwnerCareerOrErr returns the CompanyOwnerCareer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyOwnerEdges) CompanyOwnerCareerOrErr() (*CompanyCareer, error) {
	if e.CompanyOwnerCareer != nil {
		return e.CompanyOwnerCareer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: companycareer.Label}
	}
	return nil, &NotLoadedError{edge: "companyOwnerCareer"}
}

// CompanyOwnerPositionOrErr returns the CompanyOwnerPosition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyOwnerEdges) CompanyOwnerPositionOrErr() (*CompanyPosition, error) {
	if e.CompanyOwnerPosition != nil {
		return e.CompanyOwnerPosition, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: companyposition.Label}
	}
	return nil, &NotLoadedError{edge: "companyOwnerPosition"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CompanyOwner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case companyowner.FieldID, companyowner.FieldRegisterNo, companyowner.FieldCertNo, companyowner.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case companyowner.FieldName:
			values[i] = new(sql.NullString)
		case companyowner.FieldCreatedAt, companyowner.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case companyowner.ForeignKeys[0]: // career_id
			values[i] = new(sql.NullInt64)
		case companyowner.ForeignKeys[1]: // position_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CompanyOwner fields.
func (co *CompanyOwner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case companyowner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			co.ID = int(value.Int64)
		case companyowner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				co.Name = value.String
			}
		case companyowner.FieldRegisterNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RegisterNo", values[i])
			} else if value.Valid {
				co.RegisterNo = int(value.Int64)
			}
		case companyowner.FieldCertNo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field CertNo", values[i])
			} else if value.Valid {
				co.CertNo = int(value.Int64)
			}
		case companyowner.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Deleted", values[i])
			} else if value.Valid {
				co.Deleted = int(value.Int64)
			}
		case companyowner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				co.CreatedAt = value.Time
			}
		case companyowner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				co.UpdatedAt = value.Time
			}
		case companyowner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field career_id", value)
			} else if value.Valid {
				co.career_id = new(int)
				*co.career_id = int(value.Int64)
			}
		case companyowner.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field position_id", value)
			} else if value.Valid {
				co.position_id = new(int)
				*co.position_id = int(value.Int64)
			}
		default:
			co.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CompanyOwner.
// This includes values selected through modifiers, order, etc.
func (co *CompanyOwner) Value(name string) (ent.Value, error) {
	return co.selectValues.Get(name)
}

// QueryCompanyOwners queries the "companyOwners" edge of the CompanyOwner entity.
func (co *CompanyOwner) QueryCompanyOwners() *CompanyDetailQuery {
	return NewCompanyOwnerClient(co.config).QueryCompanyOwners(co)
}

// QueryCompanyOwnerCareer queries the "companyOwnerCareer" edge of the CompanyOwner entity.
func (co *CompanyOwner) QueryCompanyOwnerCareer() *CompanyCareerQuery {
	return NewCompanyOwnerClient(co.config).QueryCompanyOwnerCareer(co)
}

// QueryCompanyOwnerPosition queries the "companyOwnerPosition" edge of the CompanyOwner entity.
func (co *CompanyOwner) QueryCompanyOwnerPosition() *CompanyPositionQuery {
	return NewCompanyOwnerClient(co.config).QueryCompanyOwnerPosition(co)
}

// Update returns a builder for updating this CompanyOwner.
// Note that you need to call CompanyOwner.Unwrap() before calling this method if this CompanyOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (co *CompanyOwner) Update() *CompanyOwnerUpdateOne {
	return NewCompanyOwnerClient(co.config).UpdateOne(co)
}

// Unwrap unwraps the CompanyOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (co *CompanyOwner) Unwrap() *CompanyOwner {
	_tx, ok := co.config.driver.(*txDriver)
	if !ok {
		panic("ent: CompanyOwner is not a transactional entity")
	}
	co.config.driver = _tx.drv
	return co
}

// String implements the fmt.Stringer.
func (co *CompanyOwner) String() string {
	var builder strings.Builder
	builder.WriteString("CompanyOwner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", co.ID))
	builder.WriteString("Name=")
	builder.WriteString(co.Name)
	builder.WriteString(", ")
	builder.WriteString("RegisterNo=")
	builder.WriteString(fmt.Sprintf("%v", co.RegisterNo))
	builder.WriteString(", ")
	builder.WriteString("CertNo=")
	builder.WriteString(fmt.Sprintf("%v", co.CertNo))
	builder.WriteString(", ")
	builder.WriteString("Deleted=")
	builder.WriteString(fmt.Sprintf("%v", co.Deleted))
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(co.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(co.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCompanyOwners returns the CompanyOwners named value or an error if the edge was not
// loaded in eager-loading with this name.
func (co *CompanyOwner) NamedCompanyOwners(name string) ([]*CompanyDetail, error) {
	if co.Edges.namedCompanyOwners == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := co.Edges.namedCompanyOwners[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (co *CompanyOwner) appendNamedCompanyOwners(name string, edges ...*CompanyDetail) {
	if co.Edges.namedCompanyOwners == nil {
		co.Edges.namedCompanyOwners = make(map[string][]*CompanyDetail)
	}
	if len(edges) == 0 {
		co.Edges.namedCompanyOwners[name] = []*CompanyDetail{}
	} else {
		co.Edges.namedCompanyOwners[name] = append(co.Edges.namedCompanyOwners[name], edges...)
	}
}

// CompanyOwners is a parsable slice of CompanyOwner.
type CompanyOwners []*CompanyOwner
