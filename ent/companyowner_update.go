// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/companyposition"
	"gqlgen-ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyOwnerUpdate is the builder for updating CompanyOwner entities.
type CompanyOwnerUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyOwnerMutation
}

// Where appends a list predicates to the CompanyOwnerUpdate builder.
func (cou *CompanyOwnerUpdate) Where(ps ...predicate.CompanyOwner) *CompanyOwnerUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetName sets the "Name" field.
func (cou *CompanyOwnerUpdate) SetName(s string) *CompanyOwnerUpdate {
	cou.mutation.SetName(s)
	return cou
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableName(s *string) *CompanyOwnerUpdate {
	if s != nil {
		cou.SetName(*s)
	}
	return cou
}

// SetRegisterNo sets the "RegisterNo" field.
func (cou *CompanyOwnerUpdate) SetRegisterNo(i int) *CompanyOwnerUpdate {
	cou.mutation.ResetRegisterNo()
	cou.mutation.SetRegisterNo(i)
	return cou
}

// SetNillableRegisterNo sets the "RegisterNo" field if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableRegisterNo(i *int) *CompanyOwnerUpdate {
	if i != nil {
		cou.SetRegisterNo(*i)
	}
	return cou
}

// AddRegisterNo adds i to the "RegisterNo" field.
func (cou *CompanyOwnerUpdate) AddRegisterNo(i int) *CompanyOwnerUpdate {
	cou.mutation.AddRegisterNo(i)
	return cou
}

// ClearRegisterNo clears the value of the "RegisterNo" field.
func (cou *CompanyOwnerUpdate) ClearRegisterNo() *CompanyOwnerUpdate {
	cou.mutation.ClearRegisterNo()
	return cou
}

// SetCertNo sets the "CertNo" field.
func (cou *CompanyOwnerUpdate) SetCertNo(i int) *CompanyOwnerUpdate {
	cou.mutation.ResetCertNo()
	cou.mutation.SetCertNo(i)
	return cou
}

// SetNillableCertNo sets the "CertNo" field if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableCertNo(i *int) *CompanyOwnerUpdate {
	if i != nil {
		cou.SetCertNo(*i)
	}
	return cou
}

// AddCertNo adds i to the "CertNo" field.
func (cou *CompanyOwnerUpdate) AddCertNo(i int) *CompanyOwnerUpdate {
	cou.mutation.AddCertNo(i)
	return cou
}

// ClearCertNo clears the value of the "CertNo" field.
func (cou *CompanyOwnerUpdate) ClearCertNo() *CompanyOwnerUpdate {
	cou.mutation.ClearCertNo()
	return cou
}

// SetDeleted sets the "Deleted" field.
func (cou *CompanyOwnerUpdate) SetDeleted(i int) *CompanyOwnerUpdate {
	cou.mutation.ResetDeleted()
	cou.mutation.SetDeleted(i)
	return cou
}

// SetNillableDeleted sets the "Deleted" field if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableDeleted(i *int) *CompanyOwnerUpdate {
	if i != nil {
		cou.SetDeleted(*i)
	}
	return cou
}

// AddDeleted adds i to the "Deleted" field.
func (cou *CompanyOwnerUpdate) AddDeleted(i int) *CompanyOwnerUpdate {
	cou.mutation.AddDeleted(i)
	return cou
}

// SetCreatedAt sets the "CreatedAt" field.
func (cou *CompanyOwnerUpdate) SetCreatedAt(t time.Time) *CompanyOwnerUpdate {
	cou.mutation.SetCreatedAt(t)
	return cou
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableCreatedAt(t *time.Time) *CompanyOwnerUpdate {
	if t != nil {
		cou.SetCreatedAt(*t)
	}
	return cou
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (cou *CompanyOwnerUpdate) SetUpdatedAt(t time.Time) *CompanyOwnerUpdate {
	cou.mutation.SetUpdatedAt(t)
	return cou
}

// AddCompanyOwnerIDs adds the "companyOwners" edge to the CompanyDetail entity by IDs.
func (cou *CompanyOwnerUpdate) AddCompanyOwnerIDs(ids ...int) *CompanyOwnerUpdate {
	cou.mutation.AddCompanyOwnerIDs(ids...)
	return cou
}

// AddCompanyOwners adds the "companyOwners" edges to the CompanyDetail entity.
func (cou *CompanyOwnerUpdate) AddCompanyOwners(c ...*CompanyDetail) *CompanyOwnerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cou.AddCompanyOwnerIDs(ids...)
}

// SetCompanyOwnerCareerID sets the "companyOwnerCareer" edge to the CompanyCareer entity by ID.
func (cou *CompanyOwnerUpdate) SetCompanyOwnerCareerID(id int) *CompanyOwnerUpdate {
	cou.mutation.SetCompanyOwnerCareerID(id)
	return cou
}

// SetNillableCompanyOwnerCareerID sets the "companyOwnerCareer" edge to the CompanyCareer entity by ID if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableCompanyOwnerCareerID(id *int) *CompanyOwnerUpdate {
	if id != nil {
		cou = cou.SetCompanyOwnerCareerID(*id)
	}
	return cou
}

// SetCompanyOwnerCareer sets the "companyOwnerCareer" edge to the CompanyCareer entity.
func (cou *CompanyOwnerUpdate) SetCompanyOwnerCareer(c *CompanyCareer) *CompanyOwnerUpdate {
	return cou.SetCompanyOwnerCareerID(c.ID)
}

// SetCompanyOwnerPositionID sets the "companyOwnerPosition" edge to the CompanyPosition entity by ID.
func (cou *CompanyOwnerUpdate) SetCompanyOwnerPositionID(id int) *CompanyOwnerUpdate {
	cou.mutation.SetCompanyOwnerPositionID(id)
	return cou
}

// SetNillableCompanyOwnerPositionID sets the "companyOwnerPosition" edge to the CompanyPosition entity by ID if the given value is not nil.
func (cou *CompanyOwnerUpdate) SetNillableCompanyOwnerPositionID(id *int) *CompanyOwnerUpdate {
	if id != nil {
		cou = cou.SetCompanyOwnerPositionID(*id)
	}
	return cou
}

// SetCompanyOwnerPosition sets the "companyOwnerPosition" edge to the CompanyPosition entity.
func (cou *CompanyOwnerUpdate) SetCompanyOwnerPosition(c *CompanyPosition) *CompanyOwnerUpdate {
	return cou.SetCompanyOwnerPositionID(c.ID)
}

// Mutation returns the CompanyOwnerMutation object of the builder.
func (cou *CompanyOwnerUpdate) Mutation() *CompanyOwnerMutation {
	return cou.mutation
}

// ClearCompanyOwners clears all "companyOwners" edges to the CompanyDetail entity.
func (cou *CompanyOwnerUpdate) ClearCompanyOwners() *CompanyOwnerUpdate {
	cou.mutation.ClearCompanyOwners()
	return cou
}

// RemoveCompanyOwnerIDs removes the "companyOwners" edge to CompanyDetail entities by IDs.
func (cou *CompanyOwnerUpdate) RemoveCompanyOwnerIDs(ids ...int) *CompanyOwnerUpdate {
	cou.mutation.RemoveCompanyOwnerIDs(ids...)
	return cou
}

// RemoveCompanyOwners removes "companyOwners" edges to CompanyDetail entities.
func (cou *CompanyOwnerUpdate) RemoveCompanyOwners(c ...*CompanyDetail) *CompanyOwnerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cou.RemoveCompanyOwnerIDs(ids...)
}

// ClearCompanyOwnerCareer clears the "companyOwnerCareer" edge to the CompanyCareer entity.
func (cou *CompanyOwnerUpdate) ClearCompanyOwnerCareer() *CompanyOwnerUpdate {
	cou.mutation.ClearCompanyOwnerCareer()
	return cou
}

// ClearCompanyOwnerPosition clears the "companyOwnerPosition" edge to the CompanyPosition entity.
func (cou *CompanyOwnerUpdate) ClearCompanyOwnerPosition() *CompanyOwnerUpdate {
	cou.mutation.ClearCompanyOwnerPosition()
	return cou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *CompanyOwnerUpdate) Save(ctx context.Context) (int, error) {
	cou.defaults()
	return withHooks(ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CompanyOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CompanyOwnerUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CompanyOwnerUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *CompanyOwnerUpdate) defaults() {
	if _, ok := cou.mutation.UpdatedAt(); !ok {
		v := companyowner.UpdateDefaultUpdatedAt()
		cou.mutation.SetUpdatedAt(v)
	}
}

func (cou *CompanyOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(companyowner.Table, companyowner.Columns, sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.Name(); ok {
		_spec.SetField(companyowner.FieldName, field.TypeString, value)
	}
	if value, ok := cou.mutation.RegisterNo(); ok {
		_spec.SetField(companyowner.FieldRegisterNo, field.TypeInt, value)
	}
	if value, ok := cou.mutation.AddedRegisterNo(); ok {
		_spec.AddField(companyowner.FieldRegisterNo, field.TypeInt, value)
	}
	if cou.mutation.RegisterNoCleared() {
		_spec.ClearField(companyowner.FieldRegisterNo, field.TypeInt)
	}
	if value, ok := cou.mutation.CertNo(); ok {
		_spec.SetField(companyowner.FieldCertNo, field.TypeInt, value)
	}
	if value, ok := cou.mutation.AddedCertNo(); ok {
		_spec.AddField(companyowner.FieldCertNo, field.TypeInt, value)
	}
	if cou.mutation.CertNoCleared() {
		_spec.ClearField(companyowner.FieldCertNo, field.TypeInt)
	}
	if value, ok := cou.mutation.Deleted(); ok {
		_spec.SetField(companyowner.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := cou.mutation.AddedDeleted(); ok {
		_spec.AddField(companyowner.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := cou.mutation.CreatedAt(); ok {
		_spec.SetField(companyowner.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cou.mutation.UpdatedAt(); ok {
		_spec.SetField(companyowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if cou.mutation.CompanyOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.RemovedCompanyOwnersIDs(); len(nodes) > 0 && !cou.mutation.CompanyOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.CompanyOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.CompanyOwnerCareerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerCareerTable,
			Columns: []string{companyowner.CompanyOwnerCareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.CompanyOwnerCareerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerCareerTable,
			Columns: []string{companyowner.CompanyOwnerCareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cou.mutation.CompanyOwnerPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerPositionTable,
			Columns: []string{companyowner.CompanyOwnerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cou.mutation.CompanyOwnerPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerPositionTable,
			Columns: []string{companyowner.CompanyOwnerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// CompanyOwnerUpdateOne is the builder for updating a single CompanyOwner entity.
type CompanyOwnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyOwnerMutation
}

// SetName sets the "Name" field.
func (couo *CompanyOwnerUpdateOne) SetName(s string) *CompanyOwnerUpdateOne {
	couo.mutation.SetName(s)
	return couo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableName(s *string) *CompanyOwnerUpdateOne {
	if s != nil {
		couo.SetName(*s)
	}
	return couo
}

// SetRegisterNo sets the "RegisterNo" field.
func (couo *CompanyOwnerUpdateOne) SetRegisterNo(i int) *CompanyOwnerUpdateOne {
	couo.mutation.ResetRegisterNo()
	couo.mutation.SetRegisterNo(i)
	return couo
}

// SetNillableRegisterNo sets the "RegisterNo" field if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableRegisterNo(i *int) *CompanyOwnerUpdateOne {
	if i != nil {
		couo.SetRegisterNo(*i)
	}
	return couo
}

// AddRegisterNo adds i to the "RegisterNo" field.
func (couo *CompanyOwnerUpdateOne) AddRegisterNo(i int) *CompanyOwnerUpdateOne {
	couo.mutation.AddRegisterNo(i)
	return couo
}

// ClearRegisterNo clears the value of the "RegisterNo" field.
func (couo *CompanyOwnerUpdateOne) ClearRegisterNo() *CompanyOwnerUpdateOne {
	couo.mutation.ClearRegisterNo()
	return couo
}

// SetCertNo sets the "CertNo" field.
func (couo *CompanyOwnerUpdateOne) SetCertNo(i int) *CompanyOwnerUpdateOne {
	couo.mutation.ResetCertNo()
	couo.mutation.SetCertNo(i)
	return couo
}

// SetNillableCertNo sets the "CertNo" field if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableCertNo(i *int) *CompanyOwnerUpdateOne {
	if i != nil {
		couo.SetCertNo(*i)
	}
	return couo
}

// AddCertNo adds i to the "CertNo" field.
func (couo *CompanyOwnerUpdateOne) AddCertNo(i int) *CompanyOwnerUpdateOne {
	couo.mutation.AddCertNo(i)
	return couo
}

// ClearCertNo clears the value of the "CertNo" field.
func (couo *CompanyOwnerUpdateOne) ClearCertNo() *CompanyOwnerUpdateOne {
	couo.mutation.ClearCertNo()
	return couo
}

// SetDeleted sets the "Deleted" field.
func (couo *CompanyOwnerUpdateOne) SetDeleted(i int) *CompanyOwnerUpdateOne {
	couo.mutation.ResetDeleted()
	couo.mutation.SetDeleted(i)
	return couo
}

// SetNillableDeleted sets the "Deleted" field if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableDeleted(i *int) *CompanyOwnerUpdateOne {
	if i != nil {
		couo.SetDeleted(*i)
	}
	return couo
}

// AddDeleted adds i to the "Deleted" field.
func (couo *CompanyOwnerUpdateOne) AddDeleted(i int) *CompanyOwnerUpdateOne {
	couo.mutation.AddDeleted(i)
	return couo
}

// SetCreatedAt sets the "CreatedAt" field.
func (couo *CompanyOwnerUpdateOne) SetCreatedAt(t time.Time) *CompanyOwnerUpdateOne {
	couo.mutation.SetCreatedAt(t)
	return couo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableCreatedAt(t *time.Time) *CompanyOwnerUpdateOne {
	if t != nil {
		couo.SetCreatedAt(*t)
	}
	return couo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (couo *CompanyOwnerUpdateOne) SetUpdatedAt(t time.Time) *CompanyOwnerUpdateOne {
	couo.mutation.SetUpdatedAt(t)
	return couo
}

// AddCompanyOwnerIDs adds the "companyOwners" edge to the CompanyDetail entity by IDs.
func (couo *CompanyOwnerUpdateOne) AddCompanyOwnerIDs(ids ...int) *CompanyOwnerUpdateOne {
	couo.mutation.AddCompanyOwnerIDs(ids...)
	return couo
}

// AddCompanyOwners adds the "companyOwners" edges to the CompanyDetail entity.
func (couo *CompanyOwnerUpdateOne) AddCompanyOwners(c ...*CompanyDetail) *CompanyOwnerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return couo.AddCompanyOwnerIDs(ids...)
}

// SetCompanyOwnerCareerID sets the "companyOwnerCareer" edge to the CompanyCareer entity by ID.
func (couo *CompanyOwnerUpdateOne) SetCompanyOwnerCareerID(id int) *CompanyOwnerUpdateOne {
	couo.mutation.SetCompanyOwnerCareerID(id)
	return couo
}

// SetNillableCompanyOwnerCareerID sets the "companyOwnerCareer" edge to the CompanyCareer entity by ID if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableCompanyOwnerCareerID(id *int) *CompanyOwnerUpdateOne {
	if id != nil {
		couo = couo.SetCompanyOwnerCareerID(*id)
	}
	return couo
}

// SetCompanyOwnerCareer sets the "companyOwnerCareer" edge to the CompanyCareer entity.
func (couo *CompanyOwnerUpdateOne) SetCompanyOwnerCareer(c *CompanyCareer) *CompanyOwnerUpdateOne {
	return couo.SetCompanyOwnerCareerID(c.ID)
}

// SetCompanyOwnerPositionID sets the "companyOwnerPosition" edge to the CompanyPosition entity by ID.
func (couo *CompanyOwnerUpdateOne) SetCompanyOwnerPositionID(id int) *CompanyOwnerUpdateOne {
	couo.mutation.SetCompanyOwnerPositionID(id)
	return couo
}

// SetNillableCompanyOwnerPositionID sets the "companyOwnerPosition" edge to the CompanyPosition entity by ID if the given value is not nil.
func (couo *CompanyOwnerUpdateOne) SetNillableCompanyOwnerPositionID(id *int) *CompanyOwnerUpdateOne {
	if id != nil {
		couo = couo.SetCompanyOwnerPositionID(*id)
	}
	return couo
}

// SetCompanyOwnerPosition sets the "companyOwnerPosition" edge to the CompanyPosition entity.
func (couo *CompanyOwnerUpdateOne) SetCompanyOwnerPosition(c *CompanyPosition) *CompanyOwnerUpdateOne {
	return couo.SetCompanyOwnerPositionID(c.ID)
}

// Mutation returns the CompanyOwnerMutation object of the builder.
func (couo *CompanyOwnerUpdateOne) Mutation() *CompanyOwnerMutation {
	return couo.mutation
}

// ClearCompanyOwners clears all "companyOwners" edges to the CompanyDetail entity.
func (couo *CompanyOwnerUpdateOne) ClearCompanyOwners() *CompanyOwnerUpdateOne {
	couo.mutation.ClearCompanyOwners()
	return couo
}

// RemoveCompanyOwnerIDs removes the "companyOwners" edge to CompanyDetail entities by IDs.
func (couo *CompanyOwnerUpdateOne) RemoveCompanyOwnerIDs(ids ...int) *CompanyOwnerUpdateOne {
	couo.mutation.RemoveCompanyOwnerIDs(ids...)
	return couo
}

// RemoveCompanyOwners removes "companyOwners" edges to CompanyDetail entities.
func (couo *CompanyOwnerUpdateOne) RemoveCompanyOwners(c ...*CompanyDetail) *CompanyOwnerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return couo.RemoveCompanyOwnerIDs(ids...)
}

// ClearCompanyOwnerCareer clears the "companyOwnerCareer" edge to the CompanyCareer entity.
func (couo *CompanyOwnerUpdateOne) ClearCompanyOwnerCareer() *CompanyOwnerUpdateOne {
	couo.mutation.ClearCompanyOwnerCareer()
	return couo
}

// ClearCompanyOwnerPosition clears the "companyOwnerPosition" edge to the CompanyPosition entity.
func (couo *CompanyOwnerUpdateOne) ClearCompanyOwnerPosition() *CompanyOwnerUpdateOne {
	couo.mutation.ClearCompanyOwnerPosition()
	return couo
}

// Where appends a list predicates to the CompanyOwnerUpdate builder.
func (couo *CompanyOwnerUpdateOne) Where(ps ...predicate.CompanyOwner) *CompanyOwnerUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *CompanyOwnerUpdateOne) Select(field string, fields ...string) *CompanyOwnerUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated CompanyOwner entity.
func (couo *CompanyOwnerUpdateOne) Save(ctx context.Context) (*CompanyOwner, error) {
	couo.defaults()
	return withHooks(ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CompanyOwnerUpdateOne) SaveX(ctx context.Context) *CompanyOwner {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CompanyOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CompanyOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *CompanyOwnerUpdateOne) defaults() {
	if _, ok := couo.mutation.UpdatedAt(); !ok {
		v := companyowner.UpdateDefaultUpdatedAt()
		couo.mutation.SetUpdatedAt(v)
	}
}

func (couo *CompanyOwnerUpdateOne) sqlSave(ctx context.Context) (_node *CompanyOwner, err error) {
	_spec := sqlgraph.NewUpdateSpec(companyowner.Table, companyowner.Columns, sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanyOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyowner.FieldID)
		for _, f := range fields {
			if !companyowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companyowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.Name(); ok {
		_spec.SetField(companyowner.FieldName, field.TypeString, value)
	}
	if value, ok := couo.mutation.RegisterNo(); ok {
		_spec.SetField(companyowner.FieldRegisterNo, field.TypeInt, value)
	}
	if value, ok := couo.mutation.AddedRegisterNo(); ok {
		_spec.AddField(companyowner.FieldRegisterNo, field.TypeInt, value)
	}
	if couo.mutation.RegisterNoCleared() {
		_spec.ClearField(companyowner.FieldRegisterNo, field.TypeInt)
	}
	if value, ok := couo.mutation.CertNo(); ok {
		_spec.SetField(companyowner.FieldCertNo, field.TypeInt, value)
	}
	if value, ok := couo.mutation.AddedCertNo(); ok {
		_spec.AddField(companyowner.FieldCertNo, field.TypeInt, value)
	}
	if couo.mutation.CertNoCleared() {
		_spec.ClearField(companyowner.FieldCertNo, field.TypeInt)
	}
	if value, ok := couo.mutation.Deleted(); ok {
		_spec.SetField(companyowner.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := couo.mutation.AddedDeleted(); ok {
		_spec.AddField(companyowner.FieldDeleted, field.TypeInt, value)
	}
	if value, ok := couo.mutation.CreatedAt(); ok {
		_spec.SetField(companyowner.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := couo.mutation.UpdatedAt(); ok {
		_spec.SetField(companyowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if couo.mutation.CompanyOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.RemovedCompanyOwnersIDs(); len(nodes) > 0 && !couo.mutation.CompanyOwnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.CompanyOwnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyowner.CompanyOwnersTable,
			Columns: []string{companyowner.CompanyOwnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companydetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.CompanyOwnerCareerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerCareerTable,
			Columns: []string{companyowner.CompanyOwnerCareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.CompanyOwnerCareerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerCareerTable,
			Columns: []string{companyowner.CompanyOwnerCareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if couo.mutation.CompanyOwnerPositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerPositionTable,
			Columns: []string{companyowner.CompanyOwnerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := couo.mutation.CompanyOwnerPositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   companyowner.CompanyOwnerPositionTable,
			Columns: []string{companyowner.CompanyOwnerPositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompanyOwner{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
