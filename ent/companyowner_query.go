// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companydetail"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/companyposition"
	"gqlgen-ent/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyOwnerQuery is the builder for querying CompanyOwner entities.
type CompanyOwnerQuery struct {
	config
	ctx                      *QueryContext
	order                    []companyowner.OrderOption
	inters                   []Interceptor
	predicates               []predicate.CompanyOwner
	withCompanyOwners        *CompanyDetailQuery
	withCompanyOwnerCareer   *CompanyCareerQuery
	withCompanyOwnerPosition *CompanyPositionQuery
	withFKs                  bool
	modifiers                []func(*sql.Selector)
	loadTotal                []func(context.Context, []*CompanyOwner) error
	withNamedCompanyOwners   map[string]*CompanyDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyOwnerQuery builder.
func (coq *CompanyOwnerQuery) Where(ps ...predicate.CompanyOwner) *CompanyOwnerQuery {
	coq.predicates = append(coq.predicates, ps...)
	return coq
}

// Limit the number of records to be returned by this query.
func (coq *CompanyOwnerQuery) Limit(limit int) *CompanyOwnerQuery {
	coq.ctx.Limit = &limit
	return coq
}

// Offset to start from.
func (coq *CompanyOwnerQuery) Offset(offset int) *CompanyOwnerQuery {
	coq.ctx.Offset = &offset
	return coq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (coq *CompanyOwnerQuery) Unique(unique bool) *CompanyOwnerQuery {
	coq.ctx.Unique = &unique
	return coq
}

// Order specifies how the records should be ordered.
func (coq *CompanyOwnerQuery) Order(o ...companyowner.OrderOption) *CompanyOwnerQuery {
	coq.order = append(coq.order, o...)
	return coq
}

// QueryCompanyOwners chains the current query on the "companyOwners" edge.
func (coq *CompanyOwnerQuery) QueryCompanyOwners() *CompanyDetailQuery {
	query := (&CompanyDetailClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyowner.Table, companyowner.FieldID, selector),
			sqlgraph.To(companydetail.Table, companydetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companyowner.CompanyOwnersTable, companyowner.CompanyOwnersColumn),
		)
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompanyOwnerCareer chains the current query on the "companyOwnerCareer" edge.
func (coq *CompanyOwnerQuery) QueryCompanyOwnerCareer() *CompanyCareerQuery {
	query := (&CompanyCareerClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyowner.Table, companyowner.FieldID, selector),
			sqlgraph.To(companycareer.Table, companycareer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companyowner.CompanyOwnerCareerTable, companyowner.CompanyOwnerCareerColumn),
		)
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompanyOwnerPosition chains the current query on the "companyOwnerPosition" edge.
func (coq *CompanyOwnerQuery) QueryCompanyOwnerPosition() *CompanyPositionQuery {
	query := (&CompanyPositionClient{config: coq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := coq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := coq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companyowner.Table, companyowner.FieldID, selector),
			sqlgraph.To(companyposition.Table, companyposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, companyowner.CompanyOwnerPositionTable, companyowner.CompanyOwnerPositionColumn),
		)
		fromU = sqlgraph.SetNeighbors(coq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompanyOwner entity from the query.
// Returns a *NotFoundError when no CompanyOwner was found.
func (coq *CompanyOwnerQuery) First(ctx context.Context) (*CompanyOwner, error) {
	nodes, err := coq.Limit(1).All(setContextOp(ctx, coq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{companyowner.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (coq *CompanyOwnerQuery) FirstX(ctx context.Context) *CompanyOwner {
	node, err := coq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompanyOwner ID from the query.
// Returns a *NotFoundError when no CompanyOwner ID was found.
func (coq *CompanyOwnerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = coq.Limit(1).IDs(setContextOp(ctx, coq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{companyowner.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (coq *CompanyOwnerQuery) FirstIDX(ctx context.Context) int {
	id, err := coq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompanyOwner entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompanyOwner entity is found.
// Returns a *NotFoundError when no CompanyOwner entities are found.
func (coq *CompanyOwnerQuery) Only(ctx context.Context) (*CompanyOwner, error) {
	nodes, err := coq.Limit(2).All(setContextOp(ctx, coq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{companyowner.Label}
	default:
		return nil, &NotSingularError{companyowner.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (coq *CompanyOwnerQuery) OnlyX(ctx context.Context) *CompanyOwner {
	node, err := coq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompanyOwner ID in the query.
// Returns a *NotSingularError when more than one CompanyOwner ID is found.
// Returns a *NotFoundError when no entities are found.
func (coq *CompanyOwnerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = coq.Limit(2).IDs(setContextOp(ctx, coq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{companyowner.Label}
	default:
		err = &NotSingularError{companyowner.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (coq *CompanyOwnerQuery) OnlyIDX(ctx context.Context) int {
	id, err := coq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompanyOwners.
func (coq *CompanyOwnerQuery) All(ctx context.Context) ([]*CompanyOwner, error) {
	ctx = setContextOp(ctx, coq.ctx, "All")
	if err := coq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompanyOwner, *CompanyOwnerQuery]()
	return withInterceptors[[]*CompanyOwner](ctx, coq, qr, coq.inters)
}

// AllX is like All, but panics if an error occurs.
func (coq *CompanyOwnerQuery) AllX(ctx context.Context) []*CompanyOwner {
	nodes, err := coq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompanyOwner IDs.
func (coq *CompanyOwnerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if coq.ctx.Unique == nil && coq.path != nil {
		coq.Unique(true)
	}
	ctx = setContextOp(ctx, coq.ctx, "IDs")
	if err = coq.Select(companyowner.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (coq *CompanyOwnerQuery) IDsX(ctx context.Context) []int {
	ids, err := coq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (coq *CompanyOwnerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, coq.ctx, "Count")
	if err := coq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, coq, querierCount[*CompanyOwnerQuery](), coq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (coq *CompanyOwnerQuery) CountX(ctx context.Context) int {
	count, err := coq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (coq *CompanyOwnerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, coq.ctx, "Exist")
	switch _, err := coq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (coq *CompanyOwnerQuery) ExistX(ctx context.Context) bool {
	exist, err := coq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyOwnerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (coq *CompanyOwnerQuery) Clone() *CompanyOwnerQuery {
	if coq == nil {
		return nil
	}
	return &CompanyOwnerQuery{
		config:                   coq.config,
		ctx:                      coq.ctx.Clone(),
		order:                    append([]companyowner.OrderOption{}, coq.order...),
		inters:                   append([]Interceptor{}, coq.inters...),
		predicates:               append([]predicate.CompanyOwner{}, coq.predicates...),
		withCompanyOwners:        coq.withCompanyOwners.Clone(),
		withCompanyOwnerCareer:   coq.withCompanyOwnerCareer.Clone(),
		withCompanyOwnerPosition: coq.withCompanyOwnerPosition.Clone(),
		// clone intermediate query.
		sql:  coq.sql.Clone(),
		path: coq.path,
	}
}

// WithCompanyOwners tells the query-builder to eager-load the nodes that are connected to
// the "companyOwners" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *CompanyOwnerQuery) WithCompanyOwners(opts ...func(*CompanyDetailQuery)) *CompanyOwnerQuery {
	query := (&CompanyDetailClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withCompanyOwners = query
	return coq
}

// WithCompanyOwnerCareer tells the query-builder to eager-load the nodes that are connected to
// the "companyOwnerCareer" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *CompanyOwnerQuery) WithCompanyOwnerCareer(opts ...func(*CompanyCareerQuery)) *CompanyOwnerQuery {
	query := (&CompanyCareerClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withCompanyOwnerCareer = query
	return coq
}

// WithCompanyOwnerPosition tells the query-builder to eager-load the nodes that are connected to
// the "companyOwnerPosition" edge. The optional arguments are used to configure the query builder of the edge.
func (coq *CompanyOwnerQuery) WithCompanyOwnerPosition(opts ...func(*CompanyPositionQuery)) *CompanyOwnerQuery {
	query := (&CompanyPositionClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	coq.withCompanyOwnerPosition = query
	return coq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompanyOwner.Query().
//		GroupBy(companyowner.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (coq *CompanyOwnerQuery) GroupBy(field string, fields ...string) *CompanyOwnerGroupBy {
	coq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompanyOwnerGroupBy{build: coq}
	grbuild.flds = &coq.ctx.Fields
	grbuild.label = companyowner.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.CompanyOwner.Query().
//		Select(companyowner.FieldName).
//		Scan(ctx, &v)
func (coq *CompanyOwnerQuery) Select(fields ...string) *CompanyOwnerSelect {
	coq.ctx.Fields = append(coq.ctx.Fields, fields...)
	sbuild := &CompanyOwnerSelect{CompanyOwnerQuery: coq}
	sbuild.label = companyowner.Label
	sbuild.flds, sbuild.scan = &coq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompanyOwnerSelect configured with the given aggregations.
func (coq *CompanyOwnerQuery) Aggregate(fns ...AggregateFunc) *CompanyOwnerSelect {
	return coq.Select().Aggregate(fns...)
}

func (coq *CompanyOwnerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range coq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, coq); err != nil {
				return err
			}
		}
	}
	for _, f := range coq.ctx.Fields {
		if !companyowner.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if coq.path != nil {
		prev, err := coq.path(ctx)
		if err != nil {
			return err
		}
		coq.sql = prev
	}
	return nil
}

func (coq *CompanyOwnerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompanyOwner, error) {
	var (
		nodes       = []*CompanyOwner{}
		withFKs     = coq.withFKs
		_spec       = coq.querySpec()
		loadedTypes = [3]bool{
			coq.withCompanyOwners != nil,
			coq.withCompanyOwnerCareer != nil,
			coq.withCompanyOwnerPosition != nil,
		}
	)
	if coq.withCompanyOwnerCareer != nil || coq.withCompanyOwnerPosition != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, companyowner.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompanyOwner).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompanyOwner{config: coq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(coq.modifiers) > 0 {
		_spec.Modifiers = coq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, coq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := coq.withCompanyOwners; query != nil {
		if err := coq.loadCompanyOwners(ctx, query, nodes,
			func(n *CompanyOwner) { n.Edges.CompanyOwners = []*CompanyDetail{} },
			func(n *CompanyOwner, e *CompanyDetail) { n.Edges.CompanyOwners = append(n.Edges.CompanyOwners, e) }); err != nil {
			return nil, err
		}
	}
	if query := coq.withCompanyOwnerCareer; query != nil {
		if err := coq.loadCompanyOwnerCareer(ctx, query, nodes, nil,
			func(n *CompanyOwner, e *CompanyCareer) { n.Edges.CompanyOwnerCareer = e }); err != nil {
			return nil, err
		}
	}
	if query := coq.withCompanyOwnerPosition; query != nil {
		if err := coq.loadCompanyOwnerPosition(ctx, query, nodes, nil,
			func(n *CompanyOwner, e *CompanyPosition) { n.Edges.CompanyOwnerPosition = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range coq.withNamedCompanyOwners {
		if err := coq.loadCompanyOwners(ctx, query, nodes,
			func(n *CompanyOwner) { n.appendNamedCompanyOwners(name) },
			func(n *CompanyOwner, e *CompanyDetail) { n.appendNamedCompanyOwners(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range coq.loadTotal {
		if err := coq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (coq *CompanyOwnerQuery) loadCompanyOwners(ctx context.Context, query *CompanyDetailQuery, nodes []*CompanyOwner, init func(*CompanyOwner), assign func(*CompanyOwner, *CompanyDetail)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyOwner)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompanyDetail(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companyowner.CompanyOwnersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.owner_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "owner_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (coq *CompanyOwnerQuery) loadCompanyOwnerCareer(ctx context.Context, query *CompanyCareerQuery, nodes []*CompanyOwner, init func(*CompanyOwner), assign func(*CompanyOwner, *CompanyCareer)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyOwner)
	for i := range nodes {
		if nodes[i].career_id == nil {
			continue
		}
		fk := *nodes[i].career_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companycareer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "career_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (coq *CompanyOwnerQuery) loadCompanyOwnerPosition(ctx context.Context, query *CompanyPositionQuery, nodes []*CompanyOwner, init func(*CompanyOwner), assign func(*CompanyOwner, *CompanyPosition)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*CompanyOwner)
	for i := range nodes {
		if nodes[i].position_id == nil {
			continue
		}
		fk := *nodes[i].position_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(companyposition.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "position_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (coq *CompanyOwnerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := coq.querySpec()
	if len(coq.modifiers) > 0 {
		_spec.Modifiers = coq.modifiers
	}
	_spec.Node.Columns = coq.ctx.Fields
	if len(coq.ctx.Fields) > 0 {
		_spec.Unique = coq.ctx.Unique != nil && *coq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, coq.driver, _spec)
}

func (coq *CompanyOwnerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(companyowner.Table, companyowner.Columns, sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt))
	_spec.From = coq.sql
	if unique := coq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if coq.path != nil {
		_spec.Unique = true
	}
	if fields := coq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyowner.FieldID)
		for i := range fields {
			if fields[i] != companyowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := coq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := coq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := coq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := coq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (coq *CompanyOwnerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(coq.driver.Dialect())
	t1 := builder.Table(companyowner.Table)
	columns := coq.ctx.Fields
	if len(columns) == 0 {
		columns = companyowner.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if coq.sql != nil {
		selector = coq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if coq.ctx.Unique != nil && *coq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range coq.predicates {
		p(selector)
	}
	for _, p := range coq.order {
		p(selector)
	}
	if offset := coq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := coq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCompanyOwners tells the query-builder to eager-load the nodes that are connected to the "companyOwners"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (coq *CompanyOwnerQuery) WithNamedCompanyOwners(name string, opts ...func(*CompanyDetailQuery)) *CompanyOwnerQuery {
	query := (&CompanyDetailClient{config: coq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if coq.withNamedCompanyOwners == nil {
		coq.withNamedCompanyOwners = make(map[string]*CompanyDetailQuery)
	}
	coq.withNamedCompanyOwners[name] = query
	return coq
}

// CompanyOwnerGroupBy is the group-by builder for CompanyOwner entities.
type CompanyOwnerGroupBy struct {
	selector
	build *CompanyOwnerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cogb *CompanyOwnerGroupBy) Aggregate(fns ...AggregateFunc) *CompanyOwnerGroupBy {
	cogb.fns = append(cogb.fns, fns...)
	return cogb
}

// Scan applies the selector query and scans the result into the given value.
func (cogb *CompanyOwnerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cogb.build.ctx, "GroupBy")
	if err := cogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyOwnerQuery, *CompanyOwnerGroupBy](ctx, cogb.build, cogb, cogb.build.inters, v)
}

func (cogb *CompanyOwnerGroupBy) sqlScan(ctx context.Context, root *CompanyOwnerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cogb.fns))
	for _, fn := range cogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cogb.flds)+len(cogb.fns))
		for _, f := range *cogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompanyOwnerSelect is the builder for selecting fields of CompanyOwner entities.
type CompanyOwnerSelect struct {
	*CompanyOwnerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cos *CompanyOwnerSelect) Aggregate(fns ...AggregateFunc) *CompanyOwnerSelect {
	cos.fns = append(cos.fns, fns...)
	return cos
}

// Scan applies the selector query and scans the result into the given value.
func (cos *CompanyOwnerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cos.ctx, "Select")
	if err := cos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyOwnerQuery, *CompanyOwnerSelect](ctx, cos.CompanyOwnerQuery, cos, cos.inters, v)
}

func (cos *CompanyOwnerSelect) sqlScan(ctx context.Context, root *CompanyOwnerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cos.fns))
	for _, fn := range cos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
