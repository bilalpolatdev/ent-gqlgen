// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/companyposition"
	"gqlgen-ent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyPositionUpdate is the builder for updating CompanyPosition entities.
type CompanyPositionUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyPositionMutation
}

// Where appends a list predicates to the CompanyPositionUpdate builder.
func (cpu *CompanyPositionUpdate) Where(ps ...predicate.CompanyPosition) *CompanyPositionUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetPosition sets the "Position" field.
func (cpu *CompanyPositionUpdate) SetPosition(s string) *CompanyPositionUpdate {
	cpu.mutation.SetPosition(s)
	return cpu
}

// SetNillablePosition sets the "Position" field if the given value is not nil.
func (cpu *CompanyPositionUpdate) SetNillablePosition(s *string) *CompanyPositionUpdate {
	if s != nil {
		cpu.SetPosition(*s)
	}
	return cpu
}

// ClearPosition clears the value of the "Position" field.
func (cpu *CompanyPositionUpdate) ClearPosition() *CompanyPositionUpdate {
	cpu.mutation.ClearPosition()
	return cpu
}

// AddEngineerPositionIDs adds the "engineerPositions" edge to the CompanyEngineer entity by IDs.
func (cpu *CompanyPositionUpdate) AddEngineerPositionIDs(ids ...int) *CompanyPositionUpdate {
	cpu.mutation.AddEngineerPositionIDs(ids...)
	return cpu
}

// AddEngineerPositions adds the "engineerPositions" edges to the CompanyEngineer entity.
func (cpu *CompanyPositionUpdate) AddEngineerPositions(c ...*CompanyEngineer) *CompanyPositionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpu.AddEngineerPositionIDs(ids...)
}

// AddCompanyOwnerPositionIDs adds the "companyOwnerPositions" edge to the CompanyOwner entity by IDs.
func (cpu *CompanyPositionUpdate) AddCompanyOwnerPositionIDs(ids ...int) *CompanyPositionUpdate {
	cpu.mutation.AddCompanyOwnerPositionIDs(ids...)
	return cpu
}

// AddCompanyOwnerPositions adds the "companyOwnerPositions" edges to the CompanyOwner entity.
func (cpu *CompanyPositionUpdate) AddCompanyOwnerPositions(c ...*CompanyOwner) *CompanyPositionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpu.AddCompanyOwnerPositionIDs(ids...)
}

// Mutation returns the CompanyPositionMutation object of the builder.
func (cpu *CompanyPositionUpdate) Mutation() *CompanyPositionMutation {
	return cpu.mutation
}

// ClearEngineerPositions clears all "engineerPositions" edges to the CompanyEngineer entity.
func (cpu *CompanyPositionUpdate) ClearEngineerPositions() *CompanyPositionUpdate {
	cpu.mutation.ClearEngineerPositions()
	return cpu
}

// RemoveEngineerPositionIDs removes the "engineerPositions" edge to CompanyEngineer entities by IDs.
func (cpu *CompanyPositionUpdate) RemoveEngineerPositionIDs(ids ...int) *CompanyPositionUpdate {
	cpu.mutation.RemoveEngineerPositionIDs(ids...)
	return cpu
}

// RemoveEngineerPositions removes "engineerPositions" edges to CompanyEngineer entities.
func (cpu *CompanyPositionUpdate) RemoveEngineerPositions(c ...*CompanyEngineer) *CompanyPositionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpu.RemoveEngineerPositionIDs(ids...)
}

// ClearCompanyOwnerPositions clears all "companyOwnerPositions" edges to the CompanyOwner entity.
func (cpu *CompanyPositionUpdate) ClearCompanyOwnerPositions() *CompanyPositionUpdate {
	cpu.mutation.ClearCompanyOwnerPositions()
	return cpu
}

// RemoveCompanyOwnerPositionIDs removes the "companyOwnerPositions" edge to CompanyOwner entities by IDs.
func (cpu *CompanyPositionUpdate) RemoveCompanyOwnerPositionIDs(ids ...int) *CompanyPositionUpdate {
	cpu.mutation.RemoveCompanyOwnerPositionIDs(ids...)
	return cpu
}

// RemoveCompanyOwnerPositions removes "companyOwnerPositions" edges to CompanyOwner entities.
func (cpu *CompanyPositionUpdate) RemoveCompanyOwnerPositions(c ...*CompanyOwner) *CompanyPositionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpu.RemoveCompanyOwnerPositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CompanyPositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CompanyPositionUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CompanyPositionUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CompanyPositionUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpu *CompanyPositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(companyposition.Table, companyposition.Columns, sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Position(); ok {
		_spec.SetField(companyposition.FieldPosition, field.TypeString, value)
	}
	if cpu.mutation.PositionCleared() {
		_spec.ClearField(companyposition.FieldPosition, field.TypeString)
	}
	if cpu.mutation.EngineerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RemovedEngineerPositionsIDs(); len(nodes) > 0 && !cpu.mutation.EngineerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.EngineerPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.CompanyOwnerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.CompanyOwnerPositionsTable,
			Columns: []string{companyposition.CompanyOwnerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RemovedCompanyOwnerPositionsIDs(); len(nodes) > 0 && !cpu.mutation.CompanyOwnerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.CompanyOwnerPositionsTable,
			Columns: []string{companyposition.CompanyOwnerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CompanyOwnerPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.CompanyOwnerPositionsTable,
			Columns: []string{companyposition.CompanyOwnerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// CompanyPositionUpdateOne is the builder for updating a single CompanyPosition entity.
type CompanyPositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyPositionMutation
}

// SetPosition sets the "Position" field.
func (cpuo *CompanyPositionUpdateOne) SetPosition(s string) *CompanyPositionUpdateOne {
	cpuo.mutation.SetPosition(s)
	return cpuo
}

// SetNillablePosition sets the "Position" field if the given value is not nil.
func (cpuo *CompanyPositionUpdateOne) SetNillablePosition(s *string) *CompanyPositionUpdateOne {
	if s != nil {
		cpuo.SetPosition(*s)
	}
	return cpuo
}

// ClearPosition clears the value of the "Position" field.
func (cpuo *CompanyPositionUpdateOne) ClearPosition() *CompanyPositionUpdateOne {
	cpuo.mutation.ClearPosition()
	return cpuo
}

// AddEngineerPositionIDs adds the "engineerPositions" edge to the CompanyEngineer entity by IDs.
func (cpuo *CompanyPositionUpdateOne) AddEngineerPositionIDs(ids ...int) *CompanyPositionUpdateOne {
	cpuo.mutation.AddEngineerPositionIDs(ids...)
	return cpuo
}

// AddEngineerPositions adds the "engineerPositions" edges to the CompanyEngineer entity.
func (cpuo *CompanyPositionUpdateOne) AddEngineerPositions(c ...*CompanyEngineer) *CompanyPositionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpuo.AddEngineerPositionIDs(ids...)
}

// AddCompanyOwnerPositionIDs adds the "companyOwnerPositions" edge to the CompanyOwner entity by IDs.
func (cpuo *CompanyPositionUpdateOne) AddCompanyOwnerPositionIDs(ids ...int) *CompanyPositionUpdateOne {
	cpuo.mutation.AddCompanyOwnerPositionIDs(ids...)
	return cpuo
}

// AddCompanyOwnerPositions adds the "companyOwnerPositions" edges to the CompanyOwner entity.
func (cpuo *CompanyPositionUpdateOne) AddCompanyOwnerPositions(c ...*CompanyOwner) *CompanyPositionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpuo.AddCompanyOwnerPositionIDs(ids...)
}

// Mutation returns the CompanyPositionMutation object of the builder.
func (cpuo *CompanyPositionUpdateOne) Mutation() *CompanyPositionMutation {
	return cpuo.mutation
}

// ClearEngineerPositions clears all "engineerPositions" edges to the CompanyEngineer entity.
func (cpuo *CompanyPositionUpdateOne) ClearEngineerPositions() *CompanyPositionUpdateOne {
	cpuo.mutation.ClearEngineerPositions()
	return cpuo
}

// RemoveEngineerPositionIDs removes the "engineerPositions" edge to CompanyEngineer entities by IDs.
func (cpuo *CompanyPositionUpdateOne) RemoveEngineerPositionIDs(ids ...int) *CompanyPositionUpdateOne {
	cpuo.mutation.RemoveEngineerPositionIDs(ids...)
	return cpuo
}

// RemoveEngineerPositions removes "engineerPositions" edges to CompanyEngineer entities.
func (cpuo *CompanyPositionUpdateOne) RemoveEngineerPositions(c ...*CompanyEngineer) *CompanyPositionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpuo.RemoveEngineerPositionIDs(ids...)
}

// ClearCompanyOwnerPositions clears all "companyOwnerPositions" edges to the CompanyOwner entity.
func (cpuo *CompanyPositionUpdateOne) ClearCompanyOwnerPositions() *CompanyPositionUpdateOne {
	cpuo.mutation.ClearCompanyOwnerPositions()
	return cpuo
}

// RemoveCompanyOwnerPositionIDs removes the "companyOwnerPositions" edge to CompanyOwner entities by IDs.
func (cpuo *CompanyPositionUpdateOne) RemoveCompanyOwnerPositionIDs(ids ...int) *CompanyPositionUpdateOne {
	cpuo.mutation.RemoveCompanyOwnerPositionIDs(ids...)
	return cpuo
}

// RemoveCompanyOwnerPositions removes "companyOwnerPositions" edges to CompanyOwner entities.
func (cpuo *CompanyPositionUpdateOne) RemoveCompanyOwnerPositions(c ...*CompanyOwner) *CompanyPositionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cpuo.RemoveCompanyOwnerPositionIDs(ids...)
}

// Where appends a list predicates to the CompanyPositionUpdate builder.
func (cpuo *CompanyPositionUpdateOne) Where(ps ...predicate.CompanyPosition) *CompanyPositionUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CompanyPositionUpdateOne) Select(field string, fields ...string) *CompanyPositionUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CompanyPosition entity.
func (cpuo *CompanyPositionUpdateOne) Save(ctx context.Context) (*CompanyPosition, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CompanyPositionUpdateOne) SaveX(ctx context.Context) *CompanyPosition {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CompanyPositionUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CompanyPositionUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cpuo *CompanyPositionUpdateOne) sqlSave(ctx context.Context) (_node *CompanyPosition, err error) {
	_spec := sqlgraph.NewUpdateSpec(companyposition.Table, companyposition.Columns, sqlgraph.NewFieldSpec(companyposition.FieldID, field.TypeInt))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CompanyPosition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companyposition.FieldID)
		for _, f := range fields {
			if !companyposition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != companyposition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Position(); ok {
		_spec.SetField(companyposition.FieldPosition, field.TypeString, value)
	}
	if cpuo.mutation.PositionCleared() {
		_spec.ClearField(companyposition.FieldPosition, field.TypeString)
	}
	if cpuo.mutation.EngineerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RemovedEngineerPositionsIDs(); len(nodes) > 0 && !cpuo.mutation.EngineerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.EngineerPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.EngineerPositionsTable,
			Columns: []string{companyposition.EngineerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyengineer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.CompanyOwnerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.CompanyOwnerPositionsTable,
			Columns: []string{companyposition.CompanyOwnerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RemovedCompanyOwnerPositionsIDs(); len(nodes) > 0 && !cpuo.mutation.CompanyOwnerPositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.CompanyOwnerPositionsTable,
			Columns: []string{companyposition.CompanyOwnerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CompanyOwnerPositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   companyposition.CompanyOwnerPositionsTable,
			Columns: []string{companyposition.CompanyOwnerPositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(companyowner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CompanyPosition{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{companyposition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
