// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyowner"
	"gqlgen-ent/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyCareerQuery is the builder for querying CompanyCareer entities.
type CompanyCareerQuery struct {
	config
	ctx                          *QueryContext
	order                        []companycareer.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.CompanyCareer
	withEngineerCareers          *CompanyEngineerQuery
	withCompanyOwnerCareers      *CompanyOwnerQuery
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*CompanyCareer) error
	withNamedEngineerCareers     map[string]*CompanyEngineerQuery
	withNamedCompanyOwnerCareers map[string]*CompanyOwnerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CompanyCareerQuery builder.
func (ccq *CompanyCareerQuery) Where(ps ...predicate.CompanyCareer) *CompanyCareerQuery {
	ccq.predicates = append(ccq.predicates, ps...)
	return ccq
}

// Limit the number of records to be returned by this query.
func (ccq *CompanyCareerQuery) Limit(limit int) *CompanyCareerQuery {
	ccq.ctx.Limit = &limit
	return ccq
}

// Offset to start from.
func (ccq *CompanyCareerQuery) Offset(offset int) *CompanyCareerQuery {
	ccq.ctx.Offset = &offset
	return ccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ccq *CompanyCareerQuery) Unique(unique bool) *CompanyCareerQuery {
	ccq.ctx.Unique = &unique
	return ccq
}

// Order specifies how the records should be ordered.
func (ccq *CompanyCareerQuery) Order(o ...companycareer.OrderOption) *CompanyCareerQuery {
	ccq.order = append(ccq.order, o...)
	return ccq
}

// QueryEngineerCareers chains the current query on the "engineerCareers" edge.
func (ccq *CompanyCareerQuery) QueryEngineerCareers() *CompanyEngineerQuery {
	query := (&CompanyEngineerClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companycareer.Table, companycareer.FieldID, selector),
			sqlgraph.To(companyengineer.Table, companyengineer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companycareer.EngineerCareersTable, companycareer.EngineerCareersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompanyOwnerCareers chains the current query on the "companyOwnerCareers" edge.
func (ccq *CompanyCareerQuery) QueryCompanyOwnerCareers() *CompanyOwnerQuery {
	query := (&CompanyOwnerClient{config: ccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(companycareer.Table, companycareer.FieldID, selector),
			sqlgraph.To(companyowner.Table, companyowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, companycareer.CompanyOwnerCareersTable, companycareer.CompanyOwnerCareersColumn),
		)
		fromU = sqlgraph.SetNeighbors(ccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CompanyCareer entity from the query.
// Returns a *NotFoundError when no CompanyCareer was found.
func (ccq *CompanyCareerQuery) First(ctx context.Context) (*CompanyCareer, error) {
	nodes, err := ccq.Limit(1).All(setContextOp(ctx, ccq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{companycareer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ccq *CompanyCareerQuery) FirstX(ctx context.Context) *CompanyCareer {
	node, err := ccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CompanyCareer ID from the query.
// Returns a *NotFoundError when no CompanyCareer ID was found.
func (ccq *CompanyCareerQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ccq.Limit(1).IDs(setContextOp(ctx, ccq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{companycareer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ccq *CompanyCareerQuery) FirstIDX(ctx context.Context) int {
	id, err := ccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CompanyCareer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CompanyCareer entity is found.
// Returns a *NotFoundError when no CompanyCareer entities are found.
func (ccq *CompanyCareerQuery) Only(ctx context.Context) (*CompanyCareer, error) {
	nodes, err := ccq.Limit(2).All(setContextOp(ctx, ccq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{companycareer.Label}
	default:
		return nil, &NotSingularError{companycareer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ccq *CompanyCareerQuery) OnlyX(ctx context.Context) *CompanyCareer {
	node, err := ccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CompanyCareer ID in the query.
// Returns a *NotSingularError when more than one CompanyCareer ID is found.
// Returns a *NotFoundError when no entities are found.
func (ccq *CompanyCareerQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ccq.Limit(2).IDs(setContextOp(ctx, ccq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{companycareer.Label}
	default:
		err = &NotSingularError{companycareer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ccq *CompanyCareerQuery) OnlyIDX(ctx context.Context) int {
	id, err := ccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CompanyCareers.
func (ccq *CompanyCareerQuery) All(ctx context.Context) ([]*CompanyCareer, error) {
	ctx = setContextOp(ctx, ccq.ctx, "All")
	if err := ccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CompanyCareer, *CompanyCareerQuery]()
	return withInterceptors[[]*CompanyCareer](ctx, ccq, qr, ccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ccq *CompanyCareerQuery) AllX(ctx context.Context) []*CompanyCareer {
	nodes, err := ccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CompanyCareer IDs.
func (ccq *CompanyCareerQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ccq.ctx.Unique == nil && ccq.path != nil {
		ccq.Unique(true)
	}
	ctx = setContextOp(ctx, ccq.ctx, "IDs")
	if err = ccq.Select(companycareer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ccq *CompanyCareerQuery) IDsX(ctx context.Context) []int {
	ids, err := ccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ccq *CompanyCareerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Count")
	if err := ccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ccq, querierCount[*CompanyCareerQuery](), ccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ccq *CompanyCareerQuery) CountX(ctx context.Context) int {
	count, err := ccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ccq *CompanyCareerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ccq.ctx, "Exist")
	switch _, err := ccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ccq *CompanyCareerQuery) ExistX(ctx context.Context) bool {
	exist, err := ccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CompanyCareerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ccq *CompanyCareerQuery) Clone() *CompanyCareerQuery {
	if ccq == nil {
		return nil
	}
	return &CompanyCareerQuery{
		config:                  ccq.config,
		ctx:                     ccq.ctx.Clone(),
		order:                   append([]companycareer.OrderOption{}, ccq.order...),
		inters:                  append([]Interceptor{}, ccq.inters...),
		predicates:              append([]predicate.CompanyCareer{}, ccq.predicates...),
		withEngineerCareers:     ccq.withEngineerCareers.Clone(),
		withCompanyOwnerCareers: ccq.withCompanyOwnerCareers.Clone(),
		// clone intermediate query.
		sql:  ccq.sql.Clone(),
		path: ccq.path,
	}
}

// WithEngineerCareers tells the query-builder to eager-load the nodes that are connected to
// the "engineerCareers" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *CompanyCareerQuery) WithEngineerCareers(opts ...func(*CompanyEngineerQuery)) *CompanyCareerQuery {
	query := (&CompanyEngineerClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withEngineerCareers = query
	return ccq
}

// WithCompanyOwnerCareers tells the query-builder to eager-load the nodes that are connected to
// the "companyOwnerCareers" edge. The optional arguments are used to configure the query builder of the edge.
func (ccq *CompanyCareerQuery) WithCompanyOwnerCareers(opts ...func(*CompanyOwnerQuery)) *CompanyCareerQuery {
	query := (&CompanyOwnerClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ccq.withCompanyOwnerCareers = query
	return ccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Career string `json:"Career,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CompanyCareer.Query().
//		GroupBy(companycareer.FieldCareer).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ccq *CompanyCareerQuery) GroupBy(field string, fields ...string) *CompanyCareerGroupBy {
	ccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CompanyCareerGroupBy{build: ccq}
	grbuild.flds = &ccq.ctx.Fields
	grbuild.label = companycareer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Career string `json:"Career,omitempty"`
//	}
//
//	client.CompanyCareer.Query().
//		Select(companycareer.FieldCareer).
//		Scan(ctx, &v)
func (ccq *CompanyCareerQuery) Select(fields ...string) *CompanyCareerSelect {
	ccq.ctx.Fields = append(ccq.ctx.Fields, fields...)
	sbuild := &CompanyCareerSelect{CompanyCareerQuery: ccq}
	sbuild.label = companycareer.Label
	sbuild.flds, sbuild.scan = &ccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CompanyCareerSelect configured with the given aggregations.
func (ccq *CompanyCareerQuery) Aggregate(fns ...AggregateFunc) *CompanyCareerSelect {
	return ccq.Select().Aggregate(fns...)
}

func (ccq *CompanyCareerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ccq); err != nil {
				return err
			}
		}
	}
	for _, f := range ccq.ctx.Fields {
		if !companycareer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ccq.path != nil {
		prev, err := ccq.path(ctx)
		if err != nil {
			return err
		}
		ccq.sql = prev
	}
	return nil
}

func (ccq *CompanyCareerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CompanyCareer, error) {
	var (
		nodes       = []*CompanyCareer{}
		_spec       = ccq.querySpec()
		loadedTypes = [2]bool{
			ccq.withEngineerCareers != nil,
			ccq.withCompanyOwnerCareers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CompanyCareer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CompanyCareer{config: ccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ccq.modifiers) > 0 {
		_spec.Modifiers = ccq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ccq.withEngineerCareers; query != nil {
		if err := ccq.loadEngineerCareers(ctx, query, nodes,
			func(n *CompanyCareer) { n.Edges.EngineerCareers = []*CompanyEngineer{} },
			func(n *CompanyCareer, e *CompanyEngineer) {
				n.Edges.EngineerCareers = append(n.Edges.EngineerCareers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := ccq.withCompanyOwnerCareers; query != nil {
		if err := ccq.loadCompanyOwnerCareers(ctx, query, nodes,
			func(n *CompanyCareer) { n.Edges.CompanyOwnerCareers = []*CompanyOwner{} },
			func(n *CompanyCareer, e *CompanyOwner) {
				n.Edges.CompanyOwnerCareers = append(n.Edges.CompanyOwnerCareers, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range ccq.withNamedEngineerCareers {
		if err := ccq.loadEngineerCareers(ctx, query, nodes,
			func(n *CompanyCareer) { n.appendNamedEngineerCareers(name) },
			func(n *CompanyCareer, e *CompanyEngineer) { n.appendNamedEngineerCareers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ccq.withNamedCompanyOwnerCareers {
		if err := ccq.loadCompanyOwnerCareers(ctx, query, nodes,
			func(n *CompanyCareer) { n.appendNamedCompanyOwnerCareers(name) },
			func(n *CompanyCareer, e *CompanyOwner) { n.appendNamedCompanyOwnerCareers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ccq.loadTotal {
		if err := ccq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ccq *CompanyCareerQuery) loadEngineerCareers(ctx context.Context, query *CompanyEngineerQuery, nodes []*CompanyCareer, init func(*CompanyCareer), assign func(*CompanyCareer, *CompanyEngineer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyCareer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompanyEngineer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companycareer.EngineerCareersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.career_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "career_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "career_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ccq *CompanyCareerQuery) loadCompanyOwnerCareers(ctx context.Context, query *CompanyOwnerQuery, nodes []*CompanyCareer, init func(*CompanyCareer), assign func(*CompanyCareer, *CompanyOwner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*CompanyCareer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CompanyOwner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(companycareer.CompanyOwnerCareersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.career_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "career_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "career_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ccq *CompanyCareerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ccq.querySpec()
	if len(ccq.modifiers) > 0 {
		_spec.Modifiers = ccq.modifiers
	}
	_spec.Node.Columns = ccq.ctx.Fields
	if len(ccq.ctx.Fields) > 0 {
		_spec.Unique = ccq.ctx.Unique != nil && *ccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ccq.driver, _spec)
}

func (ccq *CompanyCareerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(companycareer.Table, companycareer.Columns, sqlgraph.NewFieldSpec(companycareer.FieldID, field.TypeInt))
	_spec.From = ccq.sql
	if unique := ccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ccq.path != nil {
		_spec.Unique = true
	}
	if fields := ccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, companycareer.FieldID)
		for i := range fields {
			if fields[i] != companycareer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ccq *CompanyCareerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ccq.driver.Dialect())
	t1 := builder.Table(companycareer.Table)
	columns := ccq.ctx.Fields
	if len(columns) == 0 {
		columns = companycareer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ccq.sql != nil {
		selector = ccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ccq.ctx.Unique != nil && *ccq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ccq.predicates {
		p(selector)
	}
	for _, p := range ccq.order {
		p(selector)
	}
	if offset := ccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedEngineerCareers tells the query-builder to eager-load the nodes that are connected to the "engineerCareers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ccq *CompanyCareerQuery) WithNamedEngineerCareers(name string, opts ...func(*CompanyEngineerQuery)) *CompanyCareerQuery {
	query := (&CompanyEngineerClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ccq.withNamedEngineerCareers == nil {
		ccq.withNamedEngineerCareers = make(map[string]*CompanyEngineerQuery)
	}
	ccq.withNamedEngineerCareers[name] = query
	return ccq
}

// WithNamedCompanyOwnerCareers tells the query-builder to eager-load the nodes that are connected to the "companyOwnerCareers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ccq *CompanyCareerQuery) WithNamedCompanyOwnerCareers(name string, opts ...func(*CompanyOwnerQuery)) *CompanyCareerQuery {
	query := (&CompanyOwnerClient{config: ccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ccq.withNamedCompanyOwnerCareers == nil {
		ccq.withNamedCompanyOwnerCareers = make(map[string]*CompanyOwnerQuery)
	}
	ccq.withNamedCompanyOwnerCareers[name] = query
	return ccq
}

// CompanyCareerGroupBy is the group-by builder for CompanyCareer entities.
type CompanyCareerGroupBy struct {
	selector
	build *CompanyCareerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ccgb *CompanyCareerGroupBy) Aggregate(fns ...AggregateFunc) *CompanyCareerGroupBy {
	ccgb.fns = append(ccgb.fns, fns...)
	return ccgb
}

// Scan applies the selector query and scans the result into the given value.
func (ccgb *CompanyCareerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccgb.build.ctx, "GroupBy")
	if err := ccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyCareerQuery, *CompanyCareerGroupBy](ctx, ccgb.build, ccgb, ccgb.build.inters, v)
}

func (ccgb *CompanyCareerGroupBy) sqlScan(ctx context.Context, root *CompanyCareerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ccgb.fns))
	for _, fn := range ccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ccgb.flds)+len(ccgb.fns))
		for _, f := range *ccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CompanyCareerSelect is the builder for selecting fields of CompanyCareer entities.
type CompanyCareerSelect struct {
	*CompanyCareerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccs *CompanyCareerSelect) Aggregate(fns ...AggregateFunc) *CompanyCareerSelect {
	ccs.fns = append(ccs.fns, fns...)
	return ccs
}

// Scan applies the selector query and scans the result into the given value.
func (ccs *CompanyCareerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccs.ctx, "Select")
	if err := ccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CompanyCareerQuery, *CompanyCareerSelect](ctx, ccs.CompanyCareerQuery, ccs, ccs.inters, v)
}

func (ccs *CompanyCareerSelect) sqlScan(ctx context.Context, root *CompanyCareerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccs.fns))
	for _, fn := range ccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
