// Code generated by ent, DO NOT EDIT.

package companyowner

import (
	"gqlgen-ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldName, v))
}

// RegisterNo applies equality check predicate on the "RegisterNo" field. It's identical to RegisterNoEQ.
func RegisterNo(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldRegisterNo, v))
}

// CertNo applies equality check predicate on the "CertNo" field. It's identical to CertNoEQ.
func CertNo(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldCertNo, v))
}

// Deleted applies equality check predicate on the "Deleted" field. It's identical to DeletedEQ.
func Deleted(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldDeleted, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldContainsFold(FieldName, v))
}

// RegisterNoEQ applies the EQ predicate on the "RegisterNo" field.
func RegisterNoEQ(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldRegisterNo, v))
}

// RegisterNoNEQ applies the NEQ predicate on the "RegisterNo" field.
func RegisterNoNEQ(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldRegisterNo, v))
}

// RegisterNoIn applies the In predicate on the "RegisterNo" field.
func RegisterNoIn(vs ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldRegisterNo, vs...))
}

// RegisterNoNotIn applies the NotIn predicate on the "RegisterNo" field.
func RegisterNoNotIn(vs ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldRegisterNo, vs...))
}

// RegisterNoGT applies the GT predicate on the "RegisterNo" field.
func RegisterNoGT(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldRegisterNo, v))
}

// RegisterNoGTE applies the GTE predicate on the "RegisterNo" field.
func RegisterNoGTE(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldRegisterNo, v))
}

// RegisterNoLT applies the LT predicate on the "RegisterNo" field.
func RegisterNoLT(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldRegisterNo, v))
}

// RegisterNoLTE applies the LTE predicate on the "RegisterNo" field.
func RegisterNoLTE(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldRegisterNo, v))
}

// RegisterNoIsNil applies the IsNil predicate on the "RegisterNo" field.
func RegisterNoIsNil() predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIsNull(FieldRegisterNo))
}

// RegisterNoNotNil applies the NotNil predicate on the "RegisterNo" field.
func RegisterNoNotNil() predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotNull(FieldRegisterNo))
}

// CertNoEQ applies the EQ predicate on the "CertNo" field.
func CertNoEQ(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldCertNo, v))
}

// CertNoNEQ applies the NEQ predicate on the "CertNo" field.
func CertNoNEQ(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldCertNo, v))
}

// CertNoIn applies the In predicate on the "CertNo" field.
func CertNoIn(vs ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldCertNo, vs...))
}

// CertNoNotIn applies the NotIn predicate on the "CertNo" field.
func CertNoNotIn(vs ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldCertNo, vs...))
}

// CertNoGT applies the GT predicate on the "CertNo" field.
func CertNoGT(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldCertNo, v))
}

// CertNoGTE applies the GTE predicate on the "CertNo" field.
func CertNoGTE(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldCertNo, v))
}

// CertNoLT applies the LT predicate on the "CertNo" field.
func CertNoLT(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldCertNo, v))
}

// CertNoLTE applies the LTE predicate on the "CertNo" field.
func CertNoLTE(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldCertNo, v))
}

// CertNoIsNil applies the IsNil predicate on the "CertNo" field.
func CertNoIsNil() predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIsNull(FieldCertNo))
}

// CertNoNotNil applies the NotNil predicate on the "CertNo" field.
func CertNoNotNil() predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotNull(FieldCertNo))
}

// DeletedEQ applies the EQ predicate on the "Deleted" field.
func DeletedEQ(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "Deleted" field.
func DeletedNEQ(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldDeleted, v))
}

// DeletedIn applies the In predicate on the "Deleted" field.
func DeletedIn(vs ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldDeleted, vs...))
}

// DeletedNotIn applies the NotIn predicate on the "Deleted" field.
func DeletedNotIn(vs ...int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldDeleted, vs...))
}

// DeletedGT applies the GT predicate on the "Deleted" field.
func DeletedGT(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldDeleted, v))
}

// DeletedGTE applies the GTE predicate on the "Deleted" field.
func DeletedGTE(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldDeleted, v))
}

// DeletedLT applies the LT predicate on the "Deleted" field.
func DeletedLT(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldDeleted, v))
}

// DeletedLTE applies the LTE predicate on the "Deleted" field.
func DeletedLTE(v int) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldDeleted, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCompanyOwners applies the HasEdge predicate on the "companyOwners" edge.
func HasCompanyOwners() predicate.CompanyOwner {
	return predicate.CompanyOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CompanyOwnersTable, CompanyOwnersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyOwnersWith applies the HasEdge predicate on the "companyOwners" edge with a given conditions (other predicates).
func HasCompanyOwnersWith(preds ...predicate.CompanyDetail) predicate.CompanyOwner {
	return predicate.CompanyOwner(func(s *sql.Selector) {
		step := newCompanyOwnersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanyOwnerCareer applies the HasEdge predicate on the "companyOwnerCareer" edge.
func HasCompanyOwnerCareer() predicate.CompanyOwner {
	return predicate.CompanyOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyOwnerCareerTable, CompanyOwnerCareerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyOwnerCareerWith applies the HasEdge predicate on the "companyOwnerCareer" edge with a given conditions (other predicates).
func HasCompanyOwnerCareerWith(preds ...predicate.CompanyCareer) predicate.CompanyOwner {
	return predicate.CompanyOwner(func(s *sql.Selector) {
		step := newCompanyOwnerCareerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanyOwnerPosition applies the HasEdge predicate on the "companyOwnerPosition" edge.
func HasCompanyOwnerPosition() predicate.CompanyOwner {
	return predicate.CompanyOwner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompanyOwnerPositionTable, CompanyOwnerPositionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyOwnerPositionWith applies the HasEdge predicate on the "companyOwnerPosition" edge with a given conditions (other predicates).
func HasCompanyOwnerPositionWith(preds ...predicate.CompanyPosition) predicate.CompanyOwner {
	return predicate.CompanyOwner(func(s *sql.Selector) {
		step := newCompanyOwnerPositionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CompanyOwner) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CompanyOwner) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CompanyOwner) predicate.CompanyOwner {
	return predicate.CompanyOwner(sql.NotPredicates(p))
}
