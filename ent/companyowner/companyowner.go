// Code generated by ent, DO NOT EDIT.

package companyowner

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the companyowner type in the database.
	Label = "company_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRegisterNo holds the string denoting the registerno field in the database.
	FieldRegisterNo = "register_no"
	// FieldCertNo holds the string denoting the certno field in the database.
	FieldCertNo = "cert_no"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCompanyOwners holds the string denoting the companyowners edge name in mutations.
	EdgeCompanyOwners = "companyOwners"
	// EdgeCompanyOwnerCareer holds the string denoting the companyownercareer edge name in mutations.
	EdgeCompanyOwnerCareer = "companyOwnerCareer"
	// EdgeCompanyOwnerPosition holds the string denoting the companyownerposition edge name in mutations.
	EdgeCompanyOwnerPosition = "companyOwnerPosition"
	// Table holds the table name of the companyowner in the database.
	Table = "company_owners"
	// CompanyOwnersTable is the table that holds the companyOwners relation/edge.
	CompanyOwnersTable = "company_details"
	// CompanyOwnersInverseTable is the table name for the CompanyDetail entity.
	// It exists in this package in order to avoid circular dependency with the "companydetail" package.
	CompanyOwnersInverseTable = "company_details"
	// CompanyOwnersColumn is the table column denoting the companyOwners relation/edge.
	CompanyOwnersColumn = "owner_id"
	// CompanyOwnerCareerTable is the table that holds the companyOwnerCareer relation/edge.
	CompanyOwnerCareerTable = "company_owners"
	// CompanyOwnerCareerInverseTable is the table name for the CompanyCareer entity.
	// It exists in this package in order to avoid circular dependency with the "companycareer" package.
	CompanyOwnerCareerInverseTable = "company_careers"
	// CompanyOwnerCareerColumn is the table column denoting the companyOwnerCareer relation/edge.
	CompanyOwnerCareerColumn = "career_id"
	// CompanyOwnerPositionTable is the table that holds the companyOwnerPosition relation/edge.
	CompanyOwnerPositionTable = "company_owners"
	// CompanyOwnerPositionInverseTable is the table name for the CompanyPosition entity.
	// It exists in this package in order to avoid circular dependency with the "companyposition" package.
	CompanyOwnerPositionInverseTable = "company_positions"
	// CompanyOwnerPositionColumn is the table column denoting the companyOwnerPosition relation/edge.
	CompanyOwnerPositionColumn = "position_id"
)

// Columns holds all SQL columns for companyowner fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRegisterNo,
	FieldCertNo,
	FieldDeleted,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "company_owners"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"career_id",
	"position_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "Name" field.
	DefaultName string
	// DefaultDeleted holds the default value on creation for the "Deleted" field.
	DefaultDeleted int
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CompanyOwner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRegisterNo orders the results by the RegisterNo field.
func ByRegisterNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegisterNo, opts...).ToFunc()
}

// ByCertNo orders the results by the CertNo field.
func ByCertNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertNo, opts...).ToFunc()
}

// ByDeleted orders the results by the Deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCompanyOwnersCount orders the results by companyOwners count.
func ByCompanyOwnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompanyOwnersStep(), opts...)
	}
}

// ByCompanyOwners orders the results by companyOwners terms.
func ByCompanyOwners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyOwnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompanyOwnerCareerField orders the results by companyOwnerCareer field.
func ByCompanyOwnerCareerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyOwnerCareerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyOwnerPositionField orders the results by companyOwnerPosition field.
func ByCompanyOwnerPositionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyOwnerPositionStep(), sql.OrderByField(field, opts...))
	}
}
func newCompanyOwnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyOwnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompanyOwnersTable, CompanyOwnersColumn),
	)
}
func newCompanyOwnerCareerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyOwnerCareerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyOwnerCareerTable, CompanyOwnerCareerColumn),
	)
}
func newCompanyOwnerPositionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyOwnerPositionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CompanyOwnerPositionTable, CompanyOwnerPositionColumn),
	)
}
