package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"gqlgen-ent/ent"
	"gqlgen-ent/ent/companycareer"
	"gqlgen-ent/ent/companyengineer"
	"gqlgen-ent/ent/companyposition"
	"gqlgen-ent/graph/generated"
	"gqlgen-ent/graph/model"
	"gqlgen-ent/middlewares"
)

// Employment is the resolver for the Employment field.
func (r *companyEngineerResolver) Employment(ctx context.Context, obj *ent.CompanyEngineer) (*string, error) {
	employment := obj.Employment.Format("2006-01-02")
	return &employment, nil
}

// Dismissal is the resolver for the Dismissal field.
func (r *companyEngineerResolver) Dismissal(ctx context.Context, obj *ent.CompanyEngineer) (*string, error) {
	dismissal := obj.Dismissal.Format("2006-01-02")
	return &dismissal, nil
}

// Career is the resolver for the Career field.
func (r *companyEngineerResolver) Career(ctx context.Context, obj *ent.CompanyEngineer) (*ent.CompanyCareer, error) {
	client := middlewares.GetClientFromContext(ctx)
	career, err := client.CompanyCareer.Query().Where(companycareer.HasEngineerCareersWith(companyengineer.IDEQ(obj.ID))).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get owners: %v", err)
	}
	return career, nil
}

// Position is the resolver for the Position field.
func (r *companyEngineerResolver) Position(ctx context.Context, obj *ent.CompanyEngineer) (*ent.CompanyPosition, error) {
	client := middlewares.GetClientFromContext(ctx)
	position, err := client.CompanyPosition.Query().Where(companyposition.HasEngineerPositionsWith(companyengineer.IDEQ(obj.ID))).Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get positions: %v", err)
	}
	return position, nil
}

// Engineer is the resolver for the Engineer field.
func (r *queryResolver) Engineer(ctx context.Context, filter *model.EngineerFilterInput) ([]*ent.CompanyEngineer, error) {
	client := middlewares.GetClientFromContext(ctx)
	query := client.CompanyEngineer.Query()

	if filter != nil {
		if filter.Career != nil {
			query = query.Where(companyengineer.HasEngineerCareerWith(companycareer.IDEQ(*filter.Career)))
		}
		if filter.Position != nil {
			query = query.Where(companyengineer.HasEngineerPositionWith(companyposition.IDEQ(*filter.Position)))
		}
	}

	engineers, err := query.All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get engineers: %v", err)
	}

	return engineers, nil
}

// CompanyEngineer returns generated.CompanyEngineerResolver implementation.
func (r *Resolver) CompanyEngineer() generated.CompanyEngineerResolver {
	return &companyEngineerResolver{r}
}

type companyEngineerResolver struct{ *Resolver }
